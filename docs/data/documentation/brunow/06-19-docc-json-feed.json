{"identifier":{"url":"doc:\/\/Brunow\/documentation\/Brunow\/06-19-docc-json-feed","interfaceLanguage":"swift"},"metadata":{"images":[{"type":"card","identifier":"jsonFeed.png"}],"title":"DocC JSON Feed","modules":[{"name":"Brunow"}],"color":{"standardColorIdentifier":"purple"},"platforms":[{"name":"Brunow","introducedAt":"2024.06.19"}]},"kind":"article","hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow"],["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2024"]]},"topicSectionsStyle":"detailedGrid","primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As I’ve talked about in a "},{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/06-29-blog-as-documentation","isActive":true,"overridingTitle":"previous post","overridingTitleInlineContent":[{"type":"text","text":"previous post"}],"type":"reference"},{"text":", I","type":"text"},{"type":"text","text":" "},{"type":"text","text":"decided to start using DocC for my personal blog just about a year ago. In that"},{"text":" ","type":"text"},{"text":"post I mentioned three things that I did not like about using DocC this way:","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The site that DocC generates is very opinionated about looking like Apple’s","type":"text"},{"text":" ","type":"text"},{"text":"documentation. This makes perfect sense for its intended purpose, but I’m not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sure how I feel about it for this purpose I’m misusing it for."}]}]},{"content":[{"inlineContent":[{"text":"The site that DocC generates has a base path of “documentation\/MODULE_NAME”","type":"text"},{"type":"text","text":" "},{"type":"text","text":"but I’d rather the site were at the root with no extra path. But really, do"},{"text":" ","type":"text"},{"text":"people care what URL they are linked to for a blog post? I don’t.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"I don’t believe that DocC generates an RSS feed which is my favorite way of"},{"type":"text","text":" "},{"text":"consuming a blog.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"style":"note","name":"Quote","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"After using it for a year, I think I like the style of my blog that looks like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"documentation. And like a year ago, I don’t really care about the URL structure"},{"text":" ","type":"text"},{"type":"text","text":"of my blog. I could not remember the URL for my blog, so I created a redirect"},{"type":"text","text":" "},{"type":"text","text":"from brunow.org to the blog so that’s all I needed to remember – the rest is"},{"type":"text","text":" "},{"text":"fine by me.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But the third bullet has been bothering me, so I decided to do","type":"text"},{"type":"text","text":" "},{"text":"something about it – I’ve strung together a handful of tools to create a JSON","type":"text"},{"type":"text","text":" "},{"text":"feed every time I rebuild my site. I’ll talk through how I did that.","type":"text"}]},{"level":2,"text":"Hacking Together a JSON Feed","type":"heading","anchor":"Hacking-Together-a-JSON-Feed"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Building a DocC site from the command line requires running a command similar to"},{"text":" ","type":"text"},{"text":"this:","type":"text"}]},{"syntax":"sh","code":["swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"That’s quite a bit to type, so from the beginning I’ve used a super simple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"script called "},{"code":"build-site.sh","type":"codeVoice"},{"type":"text","text":" to run this command:"}]},{"code":["#! \/bin\/sh","","swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org"],"syntax":"sh","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This script is the perfect place to add logic to build my feed."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"JSON feeds have ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.jsonfeed.org\/version\/1.1\/"},{"type":"text","text":","},{"text":" ","type":"text"},{"text":"which, in my opinion, makes this problem more fun to solve. I find something","type":"text"},{"text":" ","type":"text"},{"text":"satisfying about having a well-defined problem space and implementing it to the","type":"text"},{"type":"text","text":" "},{"text":"specification. The icing on top of that satisfaction is the fact that I have a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specific purpose, so I don’t need to build a general purpose thing (which is"},{"type":"text","text":" "},{"text":"much more difficult). I get to focus on my use case and making it work well.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In the JSON feed specification I see two different types of data: static and"},{"text":" ","type":"text"},{"type":"text","text":"dynamic. The static data will be the same every time my feed is generated, and"},{"text":" ","type":"text"},{"text":"that data can be hardcoded. It could look like this, easy peasy:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["items=()","","PREVIOUS_IFS=IFS","IFS=,","feed_json=\"{\\\"version\\\": \\\"https:\/\/jsonfeed.org\/version\/1.1\\\", \\\"title\\\": \\\"Brunow\\\", \\\"home_page_url\\\": \\\"https:\/\/brunow.org\/\\\", \\\"feed_url\\\": \\\"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\\\", \\\"items\\\": [${items[*]}]}\"","IFS=PREVIOUS_IFS","","printf \"%s\" \"$feed_json\" > docs\/documentation\/brunow\/feed.json"],"syntax":"sh"},{"type":"paragraph","inlineContent":[{"type":"text","text":"I find handwriting JSON simple and straightforward, so that’s what I’ve done."},{"type":"text","text":" "},{"text":"The static data is the version, title, home page URL, and feed URL. In","type":"text"},{"text":" ","type":"text"},{"text":"anticipation of adding the dynamic data, I’ve created an array of items and I’ve","type":"text"},{"text":" ","type":"text"},{"text":"added them to the static JSON – I’ll fill out that dynamic data in the items","type":"text"},{"type":"text","text":" "},{"text":"array in a bit. The ","type":"text"},{"type":"codeVoice","code":"IFS"},{"type":"text","text":" part will be used later – it will join the items in"},{"type":"text","text":" "},{"text":"the items array with a comma. On the last line we print the JSON to a file.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Before we add the dynamic data, let’s look at what our JSON will look like so"},{"text":" ","type":"text"},{"type":"text","text":"far, formatted in a nicer way:"}]},{"syntax":"json","type":"codeListing","code":["{","    \"version\": \"https:\/\/jsonfeed.org\/version\/1.1\",","    \"title\": \"Brunow\",","    \"home_page_url\": \"https:\/\/brunow.org\/\",","    \"feed_url\": \"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\",","    \"items\": []","}"]},{"inlineContent":[{"type":"text","text":"OK, looks good, let’s move on to the dynamic content. We need to fill in that"},{"type":"text","text":" "},{"text":"items array with posts. Looking at the JSON feed spec, we need data for these","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fields:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"content_html"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"date_published","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"id"}]}]},{"content":[{"inlineContent":[{"code":"summary","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"title","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"url","type":"codeVoice"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Fortunately, DocC generates an entire folder of JSON files which describe"},{"type":"text","text":" "},{"type":"text","text":"the posts, and we can use values from that JSON to create our items. We’ll use"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/jqlang.github.io\/jq\/"},{"text":" to parse the JSON:","type":"text"}],"type":"paragraph"},{"code":["for file in docs\/data\/documentation\/brunow\/*.json","do","  json=`cat \"$file\" | jq`","  id=`printf \"%s\" \"$json\" | jq -r .identifier.url`","  title=`printf \"%s\" \"$json\" | jq -r .metadata.title`","  url=`printf \"%s\" \"$id\" | sed 's#doc:\/\/Brunow\/documentation\/Brunow\/#https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/#g'`","  summary=`printf \"%s\" \"$json\" | jq -r .abstract[]?.text | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/ \/g'`","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","  content_html=\"where can we get this!?!\"","","  if [[ \"$date_published\" != \"null\" ]]","  then","    items+=(\"{\\\"id\\\":\\\"${id}\\\", \\\"title\\\": \\\"${title}\\\", \\\"url\\\": \\\"${url}\\\", \\\"content_html\\\": \\\"${content_html}\\\", \\\"summary\\\": \\\"${summary}\\\", \\\"date_published\\\": \\\"${date_published}T23:59:59-06:00\\\"}\")","  fi","done"],"type":"codeListing","syntax":"sh"},{"type":"paragraph","inlineContent":[{"text":"We loop over each JSON file in the directory, extract the JSON into a variable","type":"text"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"type":"codeVoice","code":"jq"},{"type":"text","text":", then parse different values from the JSON variable using "},{"type":"codeVoice","code":"jq"},{"type":"text","text":", "},{"type":"codeVoice","code":"sed"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"tr","type":"codeVoice"},{"type":"text","text":". Here is what one of those items would look like at this point:"}]},{"syntax":"json","code":["{","  ...","  items: [","    {","        \"id\": \"doc:\/\/Brunow\/documentation\/Brunow\/01-01-celebrations\",","        \"title\": \"Celebrations\",","        \"url\": \"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/01-01-celebrations\",","        \"content_html\": \"where can we get this!?!\",","        \"summary\": \"\",","        \"date_published\": \"2016-01-01T23:59:59-06:00\"","    },","    ...","  ]","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Most of the fields have obvious counterparts in the documentation","type":"text"},{"type":"text","text":" "},{"text":"JSON, but we have to get creative to figure out the ","type":"text"},{"code":"date_published","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"content_html"},{"type":"text","text":" fields."}]},{"type":"paragraph","inlineContent":[{"text":"For the ","type":"text"},{"code":"date_published","type":"codeVoice"},{"type":"text","text":" field, past me set myself up for success by using a"},{"text":" ","type":"text"},{"type":"text","text":"date format for the version the documentation applies to, as you can see in the"},{"text":" ","type":"text"},{"type":"text","text":"following screenshot. Therefore, I simply need to grab that version and reformat"},{"text":" ","type":"text"},{"text":"it for the date format that JSON feeds expect. Then I’m good to go.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"dateBasedVersioning","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"content_html","type":"codeVoice"},{"type":"text","text":" field is not as straightforward. Despite the fact that DocC"},{"type":"text","text":" "},{"type":"text","text":"builds documentation that can be hosted on a web server, it does not build HTML."},{"text":" ","type":"text"},{"text":"Instead, it creates a single page application (SPA) that uses JavaScript to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parse the documentation’s JSON for rendering. Fortunately, Helge Heß has an open"},{"text":" ","type":"text"},{"type":"text","text":"source project, "},{"identifier":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","isActive":true,"type":"reference"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"which takes the output of the DocC generation and parses it into HTML in a very"},{"text":" ","type":"text"},{"type":"text","text":"similar directory structure. We can use that tool like so:"}]},{"syntax":"sh","type":"codeListing","code":[".\/docc2html docs htmldocs -f -t ..\/docc2html\/Templates"]},{"inlineContent":[{"type":"codeVoice","code":"docs"},{"type":"text","text":" is the output folder from DocC, and "},{"code":"htmldocs","type":"codeVoice"},{"type":"text","text":" is where I want"},{"text":" ","type":"text"},{"code":"docc2html","type":"codeVoice"},{"text":" to output the HTML. I use ","type":"text"},{"type":"codeVoice","code":"-t"},{"type":"text","text":" to point to the "},{"code":"docc2html\/Templates","type":"codeVoice"},{"type":"text","text":" "},{"text":"folder because I overrode the header in the templates and I want to use that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead of the default. After running this, we have a folder full of HTML"},{"type":"text","text":" "},{"type":"text","text":"files, each of which pairs up with a JSON file in our DocC output. And they are"},{"type":"text","text":" "},{"type":"text","text":"both named the same, aside from their extensions being different. That makes it"},{"type":"text","text":" "},{"type":"text","text":"easy to add this code to our shell script to set the "},{"code":"content_html","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["...","for file in docs\/data\/documentation\/brunow\/*.json","do","  ...","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","+  filename=$(basename $file .json)","+  html_file=\"htmldocs\/documentation\/brunow\/$filename.html\"","+  content_html=`cat \"${html_file}\" | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g' | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/\\\\\\n\/g' | sed 's\/[\"]\/\\\\\\\"\/g'`","","  if [[ \"$date_published\" != \"null\" ]]","  ...","done","..."],"syntax":"diff","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We get the filename without the extension from the JSON filename, then use that"},{"text":" ","type":"text"},{"text":"filename to set a variable with the contents of the HTML file, plus some","type":"text"},{"text":" ","type":"text"},{"text":"escaping to ensure the HTML doesn’t break our JSON.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that’s it! I now have a "},{"identifier":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","type":"reference","isActive":true},{"text":" to get my","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"latest posts. This solution is not elegant, and it is definitely not performant."},{"type":"text","text":" "},{"type":"text","text":"But despite being all kinds of hacky, it solves a real problem – even if it has"},{"type":"text","text":" "},{"type":"text","text":"limitations, like not working with some feed services. Here’s what my script"},{"text":" ","type":"text"},{"text":"looks like after putting everything together (","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","type":"reference"},{"text":"):","type":"text"}]},{"code":["#! \/bin\/sh","","swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org","",".\/docc2html docs htmldocs -f -t ..\/docc2html\/Templates","","items=()","","for file in docs\/data\/documentation\/brunow\/*.json","do","  json=`cat \"$file\" | jq`","  id=`printf \"%s\" \"$json\" | jq -r .identifier.url`","  title=`printf \"%s\" \"$json\" | jq -r .metadata.title`","  url=`printf \"%s\" \"$id\" | sed 's#doc:\/\/Brunow\/documentation\/Brunow\/#https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/#g'`","  summary=`printf \"%s\" \"$json\" | jq -r .abstract[]?.text | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/ \/g'`","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","  filename=$(basename $file .json)","  html_file=\"htmldocs\/documentation\/brunow\/$filename.html\"","  content_html=`cat \"${html_file}\" | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g' | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/\\\\\\n\/g' | sed 's\/[\"]\/\\\\\\\"\/g'`","","  if [[ \"$date_published\" != \"null\" ]]","  then","    items+=(\"{\\\"id\\\":\\\"${id}\\\", \\\"title\\\": \\\"${title}\\\", \\\"url\\\": \\\"${url}\\\", \\\"content_html\\\": \\\"${content_html}\\\", \\\"summary\\\": \\\"${summary}\\\", \\\"date_published\\\": \\\"${date_published}T23:59:59-06:00\\\"}\")","  fi","done","","PREVIOUS_IFS=IFS","IFS=,","feed_json=\"{\\\"version\\\": \\\"https:\/\/jsonfeed.org\/version\/1.1\\\", \\\"title\\\": \\\"Brunow\\\", \\\"home_page_url\\\": \\\"https:\/\/brunow.org\/\\\", \\\"feed_url\\\": \\\"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\\\", \\\"items\\\": [${items[*]}]}\"","IFS=PREVIOUS_IFS","","printf \"%s\" \"$feed_json\" > docs\/documentation\/brunow\/feed.json","","rm -rf htmldocs"],"type":"codeListing","syntax":"sh"}]}],"abstract":[{"type":"text","text":"Stacking a pile of hacks to provide a fundamental part of a blog to my DocC site"},{"text":" ","type":"text"},{"type":"text","text":"– a machine-parsable feed with updates as I post new things."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/brunow\/06-19-docc-json-feed"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"sections":[],"references":{"doc://Brunow/documentation/Brunow":{"type":"topic","title":"Brunow","url":"\/documentation\/brunow","identifier":"doc:\/\/Brunow\/documentation\/Brunow","kind":"symbol","abstract":[{"text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he.","type":"text"}],"role":"collection"},"https://github.com/DoccZz/docc2html?tab=readme-ov-file":{"identifier":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","titleInlineContent":[{"code":"docc2html","type":"codeVoice"}],"type":"link","title":"docc2html","url":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file"},"jsonFeed.png":{"identifier":"jsonFeed.png","variants":[{"traits":["2x","light"],"url":"\/images\/Brunow\/jsonFeed@2x.png"}],"alt":null,"type":"image"},"siteHeaderScreenshot.png":{"identifier":"siteHeaderScreenshot.png","variants":[{"traits":["1x","light"],"url":"\/images\/Brunow\/siteHeaderScreenshot.png"}],"alt":"Screenshot of the header of the home page for this site.","type":"image"},"https://davidbrunow.github.io/brunow.org/documentation/brunow/feed.json":{"identifier":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","titleInlineContent":[{"type":"text","text":"JSON feed that folks can subscribe to"}],"title":"JSON feed that folks can subscribe to","url":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","type":"link"},"doc://Brunow/documentation/Brunow/Archive":{"kind":"article","type":"topic","title":"Archive","abstract":[{"text":"All posts","type":"text"}],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","role":"collectionGroup","url":"\/documentation\/brunow\/archive"},"dateBasedVersioning":{"identifier":"dateBasedVersioning","variants":[{"traits":["2x","light"],"url":"\/images\/Brunow\/dateBasedVersioning@2x.png"}],"alt":"Screenshot of the top of one of my recent blog posts, showing that the “version” is “Brunow 2024.05.27+”, where 2024.05.27 represents the date that I published the post.","type":"image"},"doc://Brunow/documentation/Brunow/06-29-blog-as-documentation":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/06-29-blog-as-documentation","kind":"article","title":"Blog as Documentation","abstract":[{"text":"Intentionally choosing the wrong tool for the job.","type":"text"}],"images":[{"identifier":"siteHeaderScreenshot.png","type":"card"}],"type":"topic","role":"article","url":"\/documentation\/brunow\/06-29-blog-as-documentation"},"https://jqlang.github.io/jq/":{"identifier":"https:\/\/jqlang.github.io\/jq\/","titleInlineContent":[{"code":"jq","type":"codeVoice"}],"title":"jq","url":"https:\/\/jqlang.github.io\/jq\/","type":"link"},"https://www.jsonfeed.org/version/1.1/":{"identifier":"https:\/\/www.jsonfeed.org\/version\/1.1\/","titleInlineContent":[{"type":"text","text":"a detailed specification"}],"title":"a detailed specification","url":"https:\/\/www.jsonfeed.org\/version\/1.1\/","type":"link"},"https://github.com/DavidBrunow/brunow.org/blob/main/build-site.sh":{"identifier":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","titleInlineContent":[{"type":"text","text":"GitHub link"}],"title":"GitHub link","url":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","type":"link"},"doc://Brunow/documentation/Brunow/2024":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2024","url":"\/documentation\/brunow\/2024","abstract":[],"title":"2024","role":"collectionGroup","kind":"article","type":"topic"}}}
{"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"By adopting a standard called","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/www.conventionalcommits.org\/en\/v1.0.0\/","isActive":true,"type":"reference"},{"type":"text","text":" for the"},{"text":" ","type":"text"},{"text":"git commits on your repo, and adding a tool that parses those commits, you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"automate the versioning of code that follows semantic versioning. I’ve written a"},{"type":"text","text":" "},{"type":"text","text":"tool that parses Conventional Commits and I’ll talk through how I use it to"},{"type":"text","text":" "},{"type":"text","text":"automate my releases."}],"type":"paragraph"},{"type":"heading","anchor":"About-Conventional-Commits","text":"About Conventional Commits","level":2},{"inlineContent":[{"type":"text","text":"Conventional commits are a style of commit that originated in the Angular"},{"type":"text","text":" "},{"text":"development team and are meant to solve the problem of automating versioning. I","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"came across the idea of conventional commits years ago, before the standard"},{"text":" ","type":"text"},{"text":"linked above was created, when looking to automate module releases at a previous","type":"text"},{"type":"text","text":" "},{"type":"text","text":"job."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Conventional commits are git commits which follow a specific format, for"},{"text":" ","type":"text"},{"text":"example:","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["feat: Add endpoint to the InputField API for formatting"]},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"feat:"},{"type":"text","text":" prefix in this format indicates that the change is a feature, which"},{"text":" ","type":"text"},{"text":"means that the semantic version’s minor version should be increased by one, and","type":"text"},{"type":"text","text":" "},{"text":"the description for that feature is “Add endpoint to the InputField API for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"formatting”."}],"type":"paragraph"},{"level":2,"anchor":"Implementing-Conventional-Commit-Parsing","text":"Implementing Conventional Commit Parsing","type":"heading"},{"inlineContent":[{"text":"To implement this parsing, we need two things:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An automation workflow that uses the parsed values to inform versioning, and","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ergonomic interaction points to inform the person using these formatted","type":"text"},{"type":"text","text":" "},{"text":"commits about what the automation does","type":"text"}]}]}],"type":"orderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’ve written a command line tool, "},{"type":"reference","identifier":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which is integral to the workflow I use for release automation."},{"isActive":true,"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/05-27-automating-release-versioning#Footnotes","type":"reference","overridingTitleInlineContent":[{"type":"text","text":"¹"}],"overridingTitle":"¹"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift Conventional Commit Parser has two commands, one for running on a pull"},{"type":"text","text":" "},{"text":"request and one for running on a branch which should create releases.","type":"text"},{"text":" ","type":"text"},{"text":"The two commands behave almost exactly the same, so once you’ve learned one","type":"text"},{"type":"text","text":" "},{"text":"there isn’t much to learn about the other.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These commands were designed for the place we need them in our automation, so"},{"text":" ","type":"text"},{"text":"let’s talk about how the pull request and release automation works. Throughout","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the remainder of this, I’m going to call the Swift Conventional Commit Parser"},{"text":" ","type":"text"},{"type":"text","text":"the “commit parsing tool” or “the tool” for the sake of brevity."}]},{"text":"Pull Request Automation","anchor":"Pull-Request-Automation","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"I choose to use the commit parsing tool in the part of my pull request"},{"text":" ","type":"text"},{"type":"text","text":"automation that runs tests. I do that because I use Danger Swift in that"},{"text":" ","type":"text"},{"text":"automation to report test results back to the pull request and it is simple to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"add the extra information from the commit parsing tool. This is what my "},{"identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-pull-request-action.yml#L15","isActive":true,"type":"reference"},{"type":"text","text":" looks like today for that automation:"}]},{"type":"codeListing","syntax":"yaml","code":["...","jobs:","...","  test:","    runs-on: macos-14","    env:","      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}","      TARGET_BRANCH: ${{ github.base_ref }}","    steps:","      - uses: actions\/checkout@v4","        with:","          fetch-depth: 0","      - name: Run Tests","        run: |","          git clone -b apple https:\/\/github.com\/DavidBrunow\/CI-Tooling.git CI-Tooling --depth 1","          .\/CI-Tooling\/unpack.sh","          .\/create_fixtures.sh","          gem install xcpretty","          gem install xcpretty-json-formatter","          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool YES","          brew install jq","          export SCHEME=`xcodebuild -list -json | jq -r '.workspace.schemes[0]'`","          xcodebuild test -scheme $SCHEME -destination \"OS=13.0\" -derivedDataPath ..\/DerivedDataTests -enableCodeCoverage YES -resultBundlePath ..\/DerivedDataTests\/coverage.xcresult | XCPRETTY_JSON_FILE_OUTPUT=result.json xcpretty -f `xcpretty-json-formatter`","          defaults write com.apple.dt.Xcode IDESkipMacroFingerprintValidation -bool NO","          brew install npm","          npm install -g danger","          .\/CI-Tooling\/swift-conventional-commit-parser pull-request -t \"origin\/$TARGET_BRANCH\" > release_notes.json || true","          .\/CI-Tooling\/danger-swift ci"]},{"type":"paragraph","inlineContent":[{"text":"There is a lot of noise in there that isn’t completely relevant to what we’re","type":"text"},{"type":"text","text":" "},{"text":"talking about here, but I think the extra context is useful for seeing how","type":"text"},{"type":"text","text":" "},{"text":"things fit together.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"This example uses my shared CI Tooling repo pattern, which stores"},{"text":" ","type":"text"},{"text":"everything needed for CI in one repo. You can learn more about that in my","type":"text"},{"text":" ","type":"text"},{"isActive":true,"overridingTitle":"blog post about it","overridingTitleInlineContent":[{"text":"blog post about it","type":"text"}],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/04-21-ci-tooling","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"The key part for this discussion comes on the next to last line, where the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"parser tool is called:"}]},{"code":[".\/CI-Tooling\/swift-conventional-commit-parser pull-request \\","  -t \"origin\/$TARGET_BRANCH\" \\","  2> swift_conventional_commit_parser_error.txt \\","  > release_notes.json \\","  || true"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"This command takes in a target branch, which we’re passing along from the pull"},{"text":" ","type":"text"},{"type":"text","text":"request’s target branch, and outputs any errors to a file called error.txt and"},{"type":"text","text":" "},{"text":"any successful output to a file called ","type":"text"},{"type":"codeVoice","code":"release_notes.json"},{"type":"text","text":". The "},{"code":"|| true","type":"codeVoice"},{"text":" at","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the end ensures that this command does not exit in an error. This is needed to"},{"type":"text","text":" "},{"text":"ensure the pipeline continues running and allows Danger Swift to report","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"everything, including any errors, back to the pull request."}]},{"type":"paragraph","inlineContent":[{"text":"The only error the tool will emit is when there are no formatted commits on the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"pull request branch. This error message is a great place to help folks learn"},{"type":"text","text":" "},{"type":"text","text":"about Conventional Commits and can be customized using the optional "},{"type":"codeVoice","code":"-n"},{"type":"text","text":" "},{"type":"text","text":"argument to pass in your own error message, which could link to how you use"},{"text":" ","type":"text"},{"text":"Conventional Commits in your CI system. By default, the error message links to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the README on the Swift Conventional Commit Parser repo, which talks about how"},{"text":" ","type":"text"},{"type":"text","text":"I use Conventional Commits."}]},{"inlineContent":[{"text":"The standard output from the tool is JSON. Here is an example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"json","code":["{","  \"bumpType\" : \"minor\",","  \"releaseNotes\" : \"## [1.1.0] - 1970-01-01\\n\\n### Features\\n* Awesome feature","(abcdef)\\n\\n### Chores\\n* Change the \\\"total\\\" field (abcdef)\",","  \"version\" : \"1.1.0\"","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can take this output, or the error message, and "},{"type":"reference","identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/Dangerfile.swift#L6","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"to report back to the pull request:"}]},{"code":["if FileManager.default.fileExists(atPath: \"release_notes.json\"),","  let contents = FileManager.default.contents(atPath: \"release_notes.json\"),","  let jsonObject = try? JSONSerialization.jsonObject(","    with: contents, ","    options: []","  ) as? [String: Any],","  let releaseNotes = jsonObject[\"releaseNotes\"] as? String {","  markdown(\"Release notes:\\n\\(releaseNotes)\")","} else if FileManager.default.fileExists(atPath: \"swift_conventional_commit_parser_error.txt\"),","  let contents = FileManager.default.contents(atPath: \"swift_conventional_commit_parser_error.txt\"),","  let errorMessage = String(data: contents, encoding: .utf8),","  errorMessage.isEmpty == false {","  fail(errorMessage)","} else {","  fail(\"No formatted commit.\")","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This code in the Dangerfile will output errors on the pull request like this:","type":"text"}]},{"inlineContent":[{"type":"image","identifier":"conventionalCommitParserErrorFromDanger"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"And will output the release notes on the pull request like this:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"conventionalCommitParserReleaseNotesFromDanger","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And that’s what it takes to make the pull request automation functional and"},{"text":" ","type":"text"},{"text":"ergonomic. Next, let’s talk about the release automation.","type":"text"}]},{"text":"Release Automation","level":3,"type":"heading","anchor":"Release-Automation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The commit parsing tool also needs to run on merges to release branches and the"},{"text":" ","type":"text"},{"type":"text","text":"release command is built for that. The tool acts the same way as for pull"},{"text":" ","type":"text"},{"type":"text","text":"requests, with the exception of not needing to pass in a target branch. Here is"},{"type":"text","text":" "},{"type":"text","text":"what the "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-release-action.yml#L7"},{"type":"text","text":" "},{"type":"text","text":"looks like today for the release automation of macOS command line tools:"}]},{"type":"codeListing","syntax":"yml","code":["...","jobs:","  release:","    runs-on: macos-14","    steps:","      - uses: actions\/create-github-app-token@v1","        id: app-token","        with:","          app-id: ${{ vars.RELEASE_BOT_APPID }}","          private-key: ${{ secrets.RELEASE_BOT_PRIVATE_KEY }}","      - uses: actions\/checkout@v4","        with:","          fetch-depth: 0","          token: ${{ steps.app-token.outputs.token }}","      - name: Release","        run: |","          git clone -b apple https:\/\/github.com\/DavidBrunow\/CI-Tooling.git CI-Tooling --depth 1","          .\/CI-Tooling\/unpack.sh","          brew install jq","          # Run conventional commit parser","          CONVENTIONAL_COMMIT_PARSER_OUTPUT=`.\/CI-Tooling\/swift-conventional-commit-parser release`","          if [[ \"$BUMP_TYPE\" == \"none\" ]]; then exit 0; fi","          VERSION=`jq -r '.version' <<<\"$CONVENTIONAL_COMMIT_PARSER_OUTPUT\"`","          RELEASE_NOTES=`jq -r '.releaseNotes' <<<\"$CONVENTIONAL_COMMIT_PARSER_OUTPUT\"`","          # Bump version","          FILE_THAT_NEEDS_VERSION_UPDATE=`grep -lr \"@main\" .\/Sources`","          sed -i '' -E \"s\/(version: \\\").*(\\\")\/\\1$VERSION\\2\/\" $FILE_THAT_NEEDS_VERSION_UPDATE","          # Update CHANGELOG","          RELEASE_NOTES=`sed 's\/$\/\\\\\\\\\/g' <<<\"$RELEASE_NOTES\"`","          sed -i '' -f - .\/CHANGELOG.md <<EOF","          7 i\\\\","          \\\\","          $RELEASE_NOTES","          EOF","          # Push changes without running CI","          git add $FILE_THAT_NEEDS_VERSION_UPDATE","          git add CHANGELOG.md","          git commit -m \"Release $VERSION [skip ci]\"","          # Add tag","          git tag \"$VERSION\"","          git push origin","          git push origin \"$VERSION\""]},{"style":"warning","name":"Warning","type":"aside","content":[{"inlineContent":[{"type":"text","text":"In order for the automation to be able to push to a protected branch,"},{"text":" ","type":"text"},{"type":"text","text":"I created a GitHub App which I can use as a bot and then added that bot to the"},{"text":" ","type":"text"},{"type":"text","text":"bypass list for the ruleset that is protecting branches."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"While setting that up is outside the scope of this post, I do want to note"},{"type":"text","text":" "},{"type":"text","text":"that this can be dangerous if setup incorrectly. Before doing so, ensure you"},{"type":"text","text":" "},{"type":"text","text":"consider that anyone with write access to the repository would theoretically"},{"type":"text","text":" "},{"type":"text","text":"be able to modify a GitHub Action workflow to push changes to those protected"},{"type":"text","text":" "},{"type":"text","text":"branches. This works fine for me because I am not giving write access to"},{"type":"text","text":" "},{"type":"text","text":"anyone else – your approach will vary based upon your needs."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This automation first installs "},{"isActive":true,"identifier":"https:\/\/jqlang.github.io\/jq\/","type":"reference"},{"type":"text","text":" because we’ll"},{"text":" ","type":"text"},{"text":"be doing all our JSON parsing of the tool’s output in the automation’s shell","type":"text"},{"type":"text","text":" "},{"text":"script. If the ","type":"text"},{"type":"codeVoice","code":"bumpType"},{"text":" is equal to “none”, and therefore no release is","type":"text"},{"type":"text","text":" "},{"text":"needed, the automation exits early. Otherwise, the release notes are added to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the changelog, the code’s version is updated, the changes are added and"},{"text":" ","type":"text"},{"text":"committed to git, the repo is tagged, and all the changes are pushed to origin.","type":"text"},{"type":"text","text":" "},{"text":"The details about how this automation works is specific to the way I have my","type":"text"},{"type":"text","text":" "},{"type":"text","text":"codebases setup, but the general process would be the same for any codebase."}]},{"type":"paragraph","inlineContent":[{"text":"With this automation in place, every commit to a release branch creates a new,","type":"text"},{"type":"text","text":" "},{"text":"properly semantically versioned release that can be distributed to your users.","type":"text"}]},{"inlineContent":[{"text":"That’s all it takes to setup this automated semantic versioning. Next I’ll talk","type":"text"},{"type":"text","text":" "},{"text":"about some approaches for this kind of automation that I rejected, in case","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you’re interested."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Rejected Alternative Approaches","anchor":"Rejected-Alternative-Approaches"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When figuring out how to automate versioning a few years ago, I considered and"},{"type":"text","text":" "},{"text":"rejected a couple of approaches. I think it is useful to talk through why I","type":"text"},{"type":"text","text":" "},{"text":"rejected them, because at first glance they seem like a simpler approach than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"what I follow today. Plus, talking through them reveals what is important about"},{"type":"text","text":" "},{"type":"text","text":"the problem space of automating versioning. I’ll also talk through another"},{"text":" ","type":"text"},{"type":"text","text":"approach that I did not consider a few years ago but that I think is relevant to"},{"type":"text","text":" "},{"text":"the thought process:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Always bumping the patch version for any non-breaking changes","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Using specially formatted branch names","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Using specially formatted pull request titles"}],"type":"paragraph"}]}]},{"text":"Rejected approach: Always bumping the patch version for any non-breaking changes","level":3,"type":"heading","anchor":"Rejected-approach-Always-bumping-the-patch-version-for-any-non-breaking-changes"},{"inlineContent":[{"text":"This is an approach that I didn’t consider when I first starting thinking about","type":"text"},{"type":"text","text":" "},{"text":"automating versioning, but I’ve recently heard that other folks might be doing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this for their build automation. I’d reject this approach for a few reasons:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Always bumping the patch version means that you aren’t actually following","type":"text"},{"type":"text","text":" "},{"type":"text","text":"semantic versioning, and I believe the most value you get out of semantic"},{"text":" ","type":"text"},{"type":"text","text":"versioning is in the “semantic” part of it. Always bumping the patch version"},{"type":"text","text":" "},{"text":"loses the semantic meaning of a version, which brings me to my second reason.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"As a client of a library that bumps versions like this, I cannot"},{"text":" ","type":"text"},{"type":"text","text":"trust the versioning to provide me with any information about how easy it will"},{"type":"text","text":" "},{"text":"be to adopt the changes.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you always bump the patch version, there is no “room” between versions to"},{"text":" ","type":"text"},{"text":"make a hotfix. For example, if I need to make a hotfix for version 1.0.1 but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"versions 1.0.2, 1.0.3, 1.0.4, and 1.0.5 have already been created, I have to get"},{"type":"text","text":" "},{"text":"creative in my version naming to create a version between 1.0.1 and 1.0.2. If I","type":"text"},{"text":" ","type":"text"},{"text":"were OK with the first point above, I’d bump the minor version by default to","type":"text"},{"type":"text","text":" "},{"text":"avoid this issue – but I’m definitely not OK with the first point.","type":"text"}]}]}]},{"text":"Rejected approach: Using specially formatted branch names","anchor":"Rejected-approach-Using-specially-formatted-branch-names","level":3,"type":"heading"},{"inlineContent":[{"text":"I considered using specially formatted branch names, but that approach meant you","type":"text"},{"text":" ","type":"text"},{"text":"either needed to know what kind of change you would be making when you started","type":"text"},{"text":" ","type":"text"},{"text":"your effort, or you would have to change your branch name later in the effort to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"match the type of change. And while I like small efforts, one change per branch"},{"type":"text","text":" "},{"type":"text","text":"seemed overly limiting. Plus, in git, branches are ephemeral. I believe that any"},{"type":"text","text":" "},{"text":"automated versioning should be idempotent and stable over time – no matter how","type":"text"},{"type":"text","text":" "},{"text":"many times it is run, given the same inputs it should always produce the same","type":"text"},{"type":"text","text":" "},{"text":"versions – and that would not be true when using branch names due to their","type":"text"},{"text":" ","type":"text"},{"text":"inherent instability. Therefore I believe we should base our versioning on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"things that git considers to be more stable."}],"type":"paragraph"},{"text":"Rejected approach: Using specially formatted pull request titles","anchor":"Rejected-approach-Using-specially-formatted-pull-request-titles","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"After rejecting specially formatted branch names, I considered something more"},{"type":"text","text":" "},{"type":"text","text":"flexible – pull request titles. Since pull request titles can be changed at any"},{"text":" ","type":"text"},{"text":"point in the pull request process, one could change the format of it without","type":"text"},{"type":"text","text":" "},{"text":"disrupting the remainder of the workflow too much since you don’t need to create","type":"text"},{"type":"text","text":" "},{"text":"a new pull request. But this approach has many of the same limitations as using","type":"text"},{"text":" ","type":"text"},{"text":"branch names around one change per pull request and the automated versioning not","type":"text"},{"type":"text","text":" "},{"text":"being idempotent and stable over time.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Even worse, this approach would couple your automated versioning to your source","type":"text"},{"type":"text","text":" "},{"type":"text","text":"control platform (GitHub, GitLab, etc.), which would be overly limiting in the"},{"text":" ","type":"text"},{"type":"text","text":"long term."}]},{"level":2,"text":"Footnotes","type":"heading","anchor":"Footnotes"},{"inlineContent":[{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"1"}],"overridingTitle":"1","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/05-27-automating-release-versioning#Implementing-Conventional-Commit-Parsing"},{"text":": There are ","type":"text"},{"type":"reference","identifier":"https:\/\/www.conventionalcommits.org\/en\/about\/#tooling-for-conventional-commits","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"many of those may fit your needs as well, but I know my tool better than those."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow"],["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2024"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Brunow\/documentation\/Brunow\/05-27-automating-release-versioning"},"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSectionsStyle":"detailedGrid","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/brunow\/05-27-automating-release-versioning"]}],"kind":"article","abstract":[{"text":"Implementing tools and patterns to ship code as soon as it is ready.","type":"text"}],"sections":[],"metadata":{"platforms":[{"name":"Brunow","introducedAt":"2024.05.27"}],"title":"Automating Release Versioning","images":[{"identifier":"conventionalCommitParserReleaseNotesFromDanger.png","type":"card"}],"color":{"standardColorIdentifier":"purple"},"modules":[{"name":"Brunow"}]},"references":{"allChecksHavePassed.png":{"identifier":"allChecksHavePassed.png","variants":[{"url":"\/images\/allChecksHavePassed@1x.png","traits":["1x","light"]}],"alt":"Screenshot of the GitHub interface showing that all CI checks have passed.","type":"image"},"https://github.com/DavidBrunow/swift-conventional-commit-parser":{"type":"link","titleInlineContent":[{"text":"Swift Conventional Commit Parser","type":"text"}],"identifier":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser","title":"Swift Conventional Commit Parser","url":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser"},"https://www.conventionalcommits.org/en/about/#tooling-for-conventional-commits":{"identifier":"https:\/\/www.conventionalcommits.org\/en\/about\/#tooling-for-conventional-commits","titleInlineContent":[{"text":"many other tools out there that can parse conventional commits","type":"text"}],"url":"https:\/\/www.conventionalcommits.org\/en\/about\/#tooling-for-conventional-commits","title":"many other tools out there that can parse conventional commits","type":"link"},"doc://Brunow/documentation/Brunow/05-27-automating-release-versioning#Implementing-Conventional-Commit-Parsing":{"kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/05-27-automating-release-versioning#Implementing-Conventional-Commit-Parsing","title":"Implementing Conventional Commit Parsing","url":"\/documentation\/brunow\/05-27-automating-release-versioning#Implementing-Conventional-Commit-Parsing"},"doc://Brunow/documentation/Brunow/05-27-automating-release-versioning#Footnotes":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/05-27-automating-release-versioning#Footnotes","url":"\/documentation\/brunow\/05-27-automating-release-versioning#Footnotes","kind":"section","title":"Footnotes","type":"topic","abstract":[]},"conventionalCommitParserErrorFromDanger":{"alt":"Screenshot of pull request comment showing that there was an error due to no formatted commits being found. This error also has a link to documentation to learn more about Conventional Commits.","type":"image","identifier":"conventionalCommitParserErrorFromDanger","variants":[{"url":"\/images\/conventionalCommitParserErrorFromDanger@2x.png","traits":["2x","light"]}]},"https://github.com/DavidBrunow/CI-Tooling/blob/apple/Dangerfile.swift#L6":{"identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/Dangerfile.swift#L6","titleInlineContent":[{"text":"use it in the Dangerfile","type":"text"}],"url":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/Dangerfile.swift#L6","title":"use it in the Dangerfile","type":"link"},"conventionalCommitParserReleaseNotesFromDanger.png":{"alt":null,"type":"image","identifier":"conventionalCommitParserReleaseNotesFromDanger.png","variants":[{"url":"\/images\/conventionalCommitParserReleaseNotesFromDanger@2x.png","traits":["2x","light"]}]},"https://github.com/DavidBrunow/CI-Tooling/blob/apple/.github/workflows/macos-tools-release-action.yml#L7":{"identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-release-action.yml#L7","titleInlineContent":[{"text":"GitHub Action YAML","type":"text"}],"url":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-release-action.yml#L7","title":"GitHub Action YAML","type":"link"},"doc://Brunow/documentation/Brunow/Archive":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","url":"\/documentation\/brunow\/archive","title":"Archive","kind":"article","abstract":[{"text":"All posts","type":"text"}],"type":"topic","role":"collectionGroup"},"doc://Brunow/documentation/Brunow/2024":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2024","type":"topic","abstract":[],"kind":"article","title":"2024","role":"collectionGroup","url":"\/documentation\/brunow\/2024"},"conventionalCommitParserReleaseNotesFromDanger":{"alt":"Screenshot of pull request comment showing release notes generated by the commit parsing tool. The release notes have a heading with the version and the date, and then sections for “Features” and “Chores”. Each of the items under the features and chores has a description of the change and the commit hash.","variants":[{"url":"\/images\/conventionalCommitParserReleaseNotesFromDanger@2x.png","traits":["2x","light"]}],"type":"image","identifier":"conventionalCommitParserReleaseNotesFromDanger"},"https://www.conventionalcommits.org/en/v1.0.0/":{"identifier":"https:\/\/www.conventionalcommits.org\/en\/v1.0.0\/","titleInlineContent":[{"text":"Conventional Commits","type":"text"}],"url":"https:\/\/www.conventionalcommits.org\/en\/v1.0.0\/","title":"Conventional Commits","type":"link"},"doc://Brunow/documentation/Brunow/04-21-ci-tooling":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/04-21-ci-tooling","type":"topic","kind":"article","abstract":[{"text":"Storing CI tools in a centralized location to be used across the pipelines for","type":"text"},{"type":"text","text":" "},{"text":"multiple projects.","type":"text"}],"title":"CI Tooling","role":"article","images":[{"identifier":"allChecksHavePassed.png","type":"card"}],"url":"\/documentation\/brunow\/04-21-ci-tooling"},"https://github.com/DavidBrunow/CI-Tooling/blob/apple/.github/workflows/macos-tools-pull-request-action.yml#L15":{"url":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-pull-request-action.yml#L15","title":"GitHub Action YAML for macOS command line tools","titleInlineContent":[{"text":"GitHub","type":"text"},{"type":"text","text":" "},{"text":"Action YAML for macOS command line tools","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-pull-request-action.yml#L15"},"doc://Brunow/documentation/Brunow":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow","kind":"symbol","url":"\/documentation\/brunow","title":"Brunow","type":"topic","abstract":[{"text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he.","type":"text"}],"role":"collection"},"https://jqlang.github.io/jq/":{"identifier":"https:\/\/jqlang.github.io\/jq\/","titleInlineContent":[{"text":"jq","type":"text"}],"url":"https:\/\/jqlang.github.io\/jq\/","title":"jq","type":"link"}}}
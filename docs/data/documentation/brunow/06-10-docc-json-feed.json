{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Brunow\/documentation\/Brunow\/06-10-docc-json-feed"},"hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow"],["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2024"]]},"metadata":{"modules":[{"name":"Brunow"}],"images":[{"type":"card","identifier":"jsonFeed.png"}],"color":{"standardColorIdentifier":"purple"},"title":"DocC JSON Feed","platforms":[{"introducedAt":"2024.06.10","name":"Brunow"}]},"kind":"article","abstract":[{"type":"text","text":"Stacking a pile of hacks to provide a fundamental part of a blog to my DocC site"},{"type":"text","text":" "},{"text":"– a machine-parsable feed with updates as I post new things.","type":"text"}],"primaryContentSections":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"As I’ve talked about in a "},{"overridingTitle":"previous post","isActive":true,"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/06-29-blog-as-documentation","type":"reference","overridingTitleInlineContent":[{"text":"previous post","type":"text"}]},{"text":", I","type":"text"},{"text":" ","type":"text"},{"text":"decided to start using DocC for my personal blog just about a year ago. In that","type":"text"},{"type":"text","text":" "},{"text":"post I mentioned three things that I did not like about using DocC this way:","type":"text"}]},{"name":"Quote","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The site that DocC generates is very opinionated about looking like Apple’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"documentation. This makes perfect sense for its intended purpose, but I’m not"},{"type":"text","text":" "},{"type":"text","text":"sure how I feel about it for this purpose I’m misusing it for."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The site that DocC generates has a base path of “documentation\/MODULE_NAME”"},{"text":" ","type":"text"},{"type":"text","text":"but I’d rather the site were at the root with no extra path. But really, do"},{"type":"text","text":" "},{"text":"people care what URL they are linked to for a blog post? I don’t.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"I don’t believe that DocC generates an RSS feed which is my favorite way of","type":"text"},{"text":" ","type":"text"},{"text":"consuming a blog.","type":"text"}],"type":"paragraph"}]}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"After using it for a year, I think I like the style of my blog that looks like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"documentation. And like a year ago, I don’t really care about the URL structure"},{"type":"text","text":" "},{"text":"of my blog. I could not remember the URL for my blog, so I created a redirect","type":"text"},{"type":"text","text":" "},{"text":"from brunow.org to the blog so that’s all I needed to remember – the rest is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"fine by me."}]},{"inlineContent":[{"text":"But the third bullet has been bothering me, so I decided to do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"something about it – I’ve strung together a handful of tools to create a JSON"},{"text":" ","type":"text"},{"type":"text","text":"feed every time I rebuild my site. I’ll talk through how I did that."}],"type":"paragraph"},{"text":"Hacking Together a JSON Feed","type":"heading","level":2,"anchor":"Hacking-Together-a-JSON-Feed"},{"type":"paragraph","inlineContent":[{"text":"Building a DocC site from the command line requires running a command similar to","type":"text"},{"type":"text","text":" "},{"text":"this:","type":"text"}]},{"code":["swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org"],"type":"codeListing","syntax":"sh"},{"inlineContent":[{"text":"That’s quite a bit to type, so from the beginning I’ve used a super simple","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"script called "},{"type":"codeVoice","code":"build-site.sh"},{"text":" to run this command:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"sh","code":["#! \/bin\/sh","","swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org"]},{"type":"paragraph","inlineContent":[{"text":"This script is the perfect place to add logic to build my feed.","type":"text"}]},{"inlineContent":[{"type":"text","text":"JSON feeds have "},{"type":"reference","identifier":"https:\/\/www.jsonfeed.org\/version\/1.1\/","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which, in my opinion, makes this problem more fun to solve. I find something"},{"text":" ","type":"text"},{"type":"text","text":"satisfying about having a well-defined problem space and implementing it to the"},{"text":" ","type":"text"},{"type":"text","text":"specification. The icing on top of that satisfaction is the fact that I have a"},{"type":"text","text":" "},{"text":"specific purpose, so I don’t need to build a general purpose thing (which is","type":"text"},{"type":"text","text":" "},{"text":"much more difficult). I get to focus on my use case and making it work well.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the JSON feed specification I see two different types of data: static and"},{"type":"text","text":" "},{"text":"dynamic. The static data will be the same every time my feed is generated, and","type":"text"},{"type":"text","text":" "},{"text":"that data can be hardcoded. It could look like this, easy peasy:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["items=()","","PREVIOUS_IFS=IFS","IFS=,","feed_json=\"{\\\"version\\\": \\\"https:\/\/jsonfeed.org\/version\/1.1\\\", \\\"title\\\": \\\"Brunow\\\", \\\"home_page_url\\\": \\\"https:\/\/brunow.org\/\\\", \\\"feed_url\\\": \\\"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\\\", \\\"items\\\": [${items[*]}]}\"","IFS=PREVIOUS_IFS","","printf \"%s\" \"$feed_json\" > docs\/documentation\/brunow\/feed.json"],"syntax":"sh"},{"type":"paragraph","inlineContent":[{"type":"text","text":"I find handwriting JSON simple and straightforward, so that’s what I’ve done."},{"type":"text","text":" "},{"text":"The static data is the version, title, home page URL, and feed URL. In","type":"text"},{"type":"text","text":" "},{"type":"text","text":"anticipation of adding the dynamic data, I’ve created an array of items and I’ve"},{"text":" ","type":"text"},{"type":"text","text":"added them to the static JSON – I’ll fill out that dynamic data in the items"},{"type":"text","text":" "},{"type":"text","text":"array in a bit. The "},{"type":"codeVoice","code":"IFS"},{"text":" part will be used later – it will join the items in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the items array with a comma. On the last line we print the JSON to a file."},{"text":" ","type":"text"},{"type":"text","text":"Before we add the dynamic data, let’s look at what our JSON will look like so"},{"text":" ","type":"text"},{"text":"far, formatted in a nicer way:","type":"text"}]},{"syntax":"json","code":["{","    \"version\": \"https:\/\/jsonfeed.org\/version\/1.1\",","    \"title\": \"Brunow\",","    \"home_page_url\": \"https:\/\/brunow.org\/\",","    \"feed_url\": \"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\",","    \"items\": []","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"OK, looks good, let’s move on to the dynamic content. We need to fill in that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"items array with posts. Looking at the JSON feed spec, we need data for these"},{"type":"text","text":" "},{"type":"text","text":"fields:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"content_html","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"date_published"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"id"}]}]},{"content":[{"inlineContent":[{"code":"summary","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"title"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"url"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Fortunately, DocC generates an entire folder of JSON files which describe","type":"text"},{"text":" ","type":"text"},{"text":"the posts, and we can use values from that JSON to create our items. We’ll use","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/jqlang.github.io\/jq\/"},{"text":" to parse the JSON:","type":"text"}]},{"type":"codeListing","code":["for file in docs\/data\/documentation\/brunow\/*.json","do","  json=`cat \"$file\" | jq`","  id=`printf \"%s\" \"$json\" | jq -r .identifier.url`","  title=`printf \"%s\" \"$json\" | jq -r .metadata.title`","  url=`printf \"%s\" \"$id\" | sed 's#doc:\/\/Brunow\/documentation\/Brunow\/#https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/#g'`","  summary=`printf \"%s\" \"$json\" | jq -r .abstract[]?.text | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/ \/g'`","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","  content_html=\"where can we get this!?!\"","","  if [[ \"$date_published\" != \"null\" ]]","  then","    items+=(\"{\\\"id\\\":\\\"${id}\\\", \\\"title\\\": \\\"${title}\\\", \\\"url\\\": \\\"${url}\\\", \\\"content_html\\\": \\\"${content_html}\\\", \\\"summary\\\": \\\"${summary}\\\", \\\"date_published\\\": \\\"${date_published}T23:59:59-06:00\\\"}\")","  fi","done"],"syntax":"sh"},{"type":"paragraph","inlineContent":[{"text":"We loop over each JSON file in the directory, extract the JSON into a variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with "},{"code":"jq","type":"codeVoice"},{"type":"text","text":", then parse different values from the JSON variable using "},{"code":"jq","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"sed"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"type":"codeVoice","code":"tr"},{"type":"text","text":". Here is what one of those items would look like at this point:"}]},{"type":"codeListing","syntax":"json","code":["{","  ...","  items: [","    {","        \"id\": \"doc:\/\/Brunow\/documentation\/Brunow\/01-01-celebrations\",","        \"title\": \"Celebrations\",","        \"url\": \"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/01-01-celebrations\",","        \"content_html\": \"where can we get this!?!\",","        \"summary\": \"\",","        \"date_published\": \"2016-01-01T23:59:59-06:00\"","    },","    ...","  ]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most of the fields have obvious counterparts in the documentation"},{"text":" ","type":"text"},{"type":"text","text":"JSON, but we have to get creative to figure out the "},{"type":"codeVoice","code":"date_published"},{"text":" and","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"content_html"},{"text":" fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For the ","type":"text"},{"code":"date_published","type":"codeVoice"},{"type":"text","text":" field, past me set myself up for success by using a"},{"text":" ","type":"text"},{"text":"date format for the version the documentation applies to, as you can see in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"following screenshot. Therefore, I simply need to grab that version and reformat"},{"text":" ","type":"text"},{"text":"it for the date format that JSON feeds expect. Then I’m good to go.","type":"text"}]},{"inlineContent":[{"identifier":"dateBasedVersioning","type":"image"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"content_html"},{"text":" field is not as straightforward. Despite the fact that DocC","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"builds documentation that can be hosted on a web server, it does not build HTML."},{"type":"text","text":" "},{"text":"Instead, it creates a single page application (SPA) that uses JavaScript to","type":"text"},{"text":" ","type":"text"},{"text":"parse the documentation’s JSON for rendering. Fortunately, Helge Heß has an open","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"source project, "},{"isActive":true,"identifier":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","type":"reference"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which takes the output of the DocC generation and parses it into HTML in a very"},{"type":"text","text":" "},{"type":"text","text":"similar directory structure. We can use that tool like so:"}]},{"type":"codeListing","code":[".\/docc2html docs htmldocs -f -t ..\/docc2html\/Templates"],"syntax":"sh"},{"type":"paragraph","inlineContent":[{"code":"docs","type":"codeVoice"},{"type":"text","text":" is the output folder from DocC, and "},{"type":"codeVoice","code":"htmldocs"},{"type":"text","text":" is where I want"},{"type":"text","text":" "},{"code":"docc2html","type":"codeVoice"},{"type":"text","text":" to output the HTML. I use "},{"type":"codeVoice","code":"-t"},{"type":"text","text":" to point to the "},{"type":"codeVoice","code":"docc2html\/Templates"},{"type":"text","text":" "},{"type":"text","text":"folder because I overrode the header in the templates and I want to use that"},{"type":"text","text":" "},{"type":"text","text":"instead of the default. After running this, we have a folder full of HTML"},{"text":" ","type":"text"},{"text":"files, each of which pairs up with a JSON file in our DocC output. And they are","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"both named the same, aside from their extensions being different. That makes it"},{"text":" ","type":"text"},{"type":"text","text":"easy to add this code to our shell script to set the "},{"type":"codeVoice","code":"content_html"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"diff","code":["...","for file in docs\/data\/documentation\/brunow\/*.json","do","  ...","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","+  filename=$(basename $file .json)","+  html_file=\"htmldocs\/documentation\/brunow\/$filename.html\"","+  content_html=`cat \"${html_file}\" | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g' | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/\\\\\\n\/g' | sed 's\/[\"]\/\\\\\\\"\/g'`","","  if [[ \"$date_published\" != \"null\" ]]","  ...","done","..."]},{"inlineContent":[{"type":"text","text":"We get the filename without the extension from the JSON filename, then use that"},{"text":" ","type":"text"},{"type":"text","text":"filename to set a variable with the contents of the HTML file, plus some"},{"text":" ","type":"text"},{"text":"escaping to ensure the HTML doesn’t break our JSON.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"And that’s it! I now have a ","type":"text"},{"isActive":true,"identifier":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","type":"reference"},{"text":" to get my","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"latest posts. This solution is not elegant, and it is definitely not performant."},{"text":" ","type":"text"},{"text":"But despite being all kinds of hacky, it solves a real problem – even if it has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"limitations, like not working with some feed services. Here’s what my script"},{"text":" ","type":"text"},{"type":"text","text":"looks like after putting everything together ("},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"codeListing","syntax":"sh","code":["#! \/bin\/sh","","swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org","",".\/docc2html docs htmldocs -f -t ..\/docc2html\/Templates","","items=()","","for file in docs\/data\/documentation\/brunow\/*.json","do","  json=`cat \"$file\" | jq`","  id=`printf \"%s\" \"$json\" | jq -r .identifier.url`","  title=`printf \"%s\" \"$json\" | jq -r .metadata.title`","  url=`printf \"%s\" \"$id\" | sed 's#doc:\/\/Brunow\/documentation\/Brunow\/#https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/#g'`","  summary=`printf \"%s\" \"$json\" | jq -r .abstract[]?.text | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/ \/g'`","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","  filename=$(basename $file .json)","  html_file=\"htmldocs\/documentation\/brunow\/$filename.html\"","  content_html=`cat \"${html_file}\" | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g' | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/\\\\\\n\/g' | sed 's\/[\"]\/\\\\\\\"\/g'`","","  if [[ \"$date_published\" != \"null\" ]]","  then","    items+=(\"{\\\"id\\\":\\\"${id}\\\", \\\"title\\\": \\\"${title}\\\", \\\"url\\\": \\\"${url}\\\", \\\"content_html\\\": \\\"${content_html}\\\", \\\"summary\\\": \\\"${summary}\\\", \\\"date_published\\\": \\\"${date_published}T23:59:59-06:00\\\"}\")","  fi","done","","PREVIOUS_IFS=IFS","IFS=,","feed_json=\"{\\\"version\\\": \\\"https:\/\/jsonfeed.org\/version\/1.1\\\", \\\"title\\\": \\\"Brunow\\\", \\\"home_page_url\\\": \\\"https:\/\/brunow.org\/\\\", \\\"feed_url\\\": \\\"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\\\", \\\"items\\\": [${items[*]}]}\"","IFS=PREVIOUS_IFS","","printf \"%s\" \"$feed_json\" > docs\/documentation\/brunow\/feed.json","","rm -rf htmldocs"]}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"topicSectionsStyle":"detailedGrid","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/brunow\/06-10-docc-json-feed"]}],"references":{"https://jqlang.github.io/jq/":{"identifier":"https:\/\/jqlang.github.io\/jq\/","url":"https:\/\/jqlang.github.io\/jq\/","type":"link","title":"jq","titleInlineContent":[{"type":"codeVoice","code":"jq"}]},"doc://Brunow/documentation/Brunow/2024":{"kind":"article","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2024","url":"\/documentation\/brunow\/2024","role":"collectionGroup","abstract":[],"title":"2024","type":"topic"},"https://github.com/DavidBrunow/brunow.org/blob/main/build-site.sh":{"identifier":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","url":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","type":"link","title":"GitHub link","titleInlineContent":[{"type":"text","text":"GitHub link"}]},"doc://Brunow/documentation/Brunow/Archive":{"title":"Archive","type":"topic","role":"collectionGroup","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","kind":"article","url":"\/documentation\/brunow\/archive","abstract":[{"type":"text","text":"All posts"}]},"https://davidbrunow.github.io/brunow.org/documentation/brunow/feed.json":{"identifier":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","titleInlineContent":[{"type":"text","text":"JSON feed that folks can subscribe to"}],"type":"link","url":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","title":"JSON feed that folks can subscribe to"},"https://www.jsonfeed.org/version/1.1/":{"identifier":"https:\/\/www.jsonfeed.org\/version\/1.1\/","titleInlineContent":[{"type":"text","text":"a detailed specification"}],"type":"link","url":"https:\/\/www.jsonfeed.org\/version\/1.1\/","title":"a detailed specification"},"doc://Brunow/documentation/Brunow":{"role":"collection","url":"\/documentation\/brunow","identifier":"doc:\/\/Brunow\/documentation\/Brunow","title":"Brunow","type":"topic","kind":"symbol","abstract":[{"text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he.","type":"text"}]},"siteHeaderScreenshot.png":{"identifier":"siteHeaderScreenshot.png","alt":"Screenshot of the header of the home page for this site.","variants":[{"url":"\/images\/Brunow\/siteHeaderScreenshot.png","traits":["1x","light"]}],"type":"image"},"jsonFeed.png":{"identifier":"jsonFeed.png","alt":null,"variants":[{"url":"\/images\/Brunow\/jsonFeed@2x.png","traits":["2x","light"]}],"type":"image"},"dateBasedVersioning":{"identifier":"dateBasedVersioning","alt":"Screenshot of the top of one of my recent blog posts, showing that the “version” is “Brunow 2024.05.27+”, where 2024.05.27 represents the date that I published the post.","variants":[{"url":"\/images\/Brunow\/dateBasedVersioning@2x.png","traits":["2x","light"]}],"type":"image"},"doc://Brunow/documentation/Brunow/06-29-blog-as-documentation":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/06-29-blog-as-documentation","kind":"article","abstract":[{"type":"text","text":"Intentionally choosing the wrong tool for the job."}],"title":"Blog as Documentation","images":[{"identifier":"siteHeaderScreenshot.png","type":"card"}],"url":"\/documentation\/brunow\/06-29-blog-as-documentation","role":"article","type":"topic"},"https://github.com/DoccZz/docc2html?tab=readme-ov-file":{"identifier":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","titleInlineContent":[{"type":"codeVoice","code":"docc2html"}],"type":"link","url":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","title":"docc2html"}}}
{"variants":[{"paths":["\/documentation\/brunow\/06-10-docc-json-feed"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Stacking a pile of hacks to provide a fundamental part of a blog to my DocC site"},{"type":"text","text":" "},{"type":"text","text":"– a machine-parsable feed with updates as I post new things."}],"identifier":{"url":"doc:\/\/Brunow\/documentation\/Brunow\/06-10-docc-json-feed","interfaceLanguage":"swift"},"kind":"article","schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"content":[{"inlineContent":[{"type":"text","text":"As I’ve talked about in a "},{"overridingTitle":"previous post","overridingTitleInlineContent":[{"text":"previous post","type":"text"}],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/06-29-blog-as-documentation","isActive":true,"type":"reference"},{"type":"text","text":", I"},{"type":"text","text":" "},{"text":"decided to start using DocC for my personal blog just about a year ago. In that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"post I mentioned three things that I did not like about using DocC this way:"}],"type":"paragraph"},{"name":"Quote","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"items":[{"content":[{"inlineContent":[{"text":"The site that DocC generates is very opinionated about looking like Apple’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"documentation. This makes perfect sense for its intended purpose, but I’m not"},{"type":"text","text":" "},{"type":"text","text":"sure how I feel about it for this purpose I’m misusing it for."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The site that DocC generates has a base path of “documentation\/MODULE_NAME”","type":"text"},{"text":" ","type":"text"},{"text":"but I’d rather the site were at the root with no extra path. But really, do","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"people care what URL they are linked to for a blog post? I don’t."}]}]},{"content":[{"inlineContent":[{"text":"I don’t believe that DocC generates an RSS feed which is my favorite way of","type":"text"},{"type":"text","text":" "},{"text":"consuming a blog.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"After using it for a year, I think I like the style of my blog that looks like"},{"type":"text","text":" "},{"type":"text","text":"documentation. And like a year ago, I don’t really care about the URL structure"},{"type":"text","text":" "},{"type":"text","text":"of my blog. I could not remember the URL for my blog, so I created a redirect"},{"type":"text","text":" "},{"text":"from brunow.org to the blog so that’s all I needed to remember – the rest is","type":"text"},{"type":"text","text":" "},{"text":"fine by me.","type":"text"}]},{"inlineContent":[{"text":"But the third bullet has been bothering me, so I decided to do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"something about it – I’ve strung together a handful of tools to create a JSON"},{"text":" ","type":"text"},{"type":"text","text":"feed every time I rebuild my site. I’ll talk through how I did that."}],"type":"paragraph"},{"level":2,"anchor":"Hacking-Together-a-JSON-Feed","type":"heading","text":"Hacking Together a JSON Feed"},{"inlineContent":[{"text":"Building a DocC site from the command line requires running a command similar to","type":"text"},{"type":"text","text":" "},{"text":"this:","type":"text"}],"type":"paragraph"},{"code":["swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org"],"type":"codeListing","syntax":"sh"},{"inlineContent":[{"type":"text","text":"That’s quite a bit to type, so from the beginning I’ve used a super simple"},{"text":" ","type":"text"},{"type":"text","text":"script called "},{"code":"build-site.sh","type":"codeVoice"},{"type":"text","text":" to run this command:"}],"type":"paragraph"},{"syntax":"sh","code":["#! \/bin\/sh","","swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This script is the perfect place to add logic to build my feed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"JSON feeds have "},{"identifier":"https:\/\/www.jsonfeed.org\/version\/1.1\/","type":"reference","isActive":true},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"which, in my opinion, makes this problem more fun to solve. I find something"},{"type":"text","text":" "},{"text":"satisfying about having a well-defined problem space and implementing it to the","type":"text"},{"type":"text","text":" "},{"text":"specification. The icing on top of that satisfaction is the fact that I have a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specific purpose, so I don’t need to build a general purpose thing (which is"},{"type":"text","text":" "},{"type":"text","text":"much more difficult). I get to focus on my use case and making it work well."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the JSON feed specification I see two different types of data: static and"},{"type":"text","text":" "},{"text":"dynamic. The static data will be the same every time my feed is generated, and","type":"text"},{"text":" ","type":"text"},{"text":"that data can be hardcoded. It could look like this, easy peasy:","type":"text"}]},{"type":"codeListing","code":["items=()","","PREVIOUS_IFS=IFS","IFS=,","feed_json=\"{\\\"version\\\": \\\"https:\/\/jsonfeed.org\/version\/1.1\\\", \\\"title\\\": \\\"Brunow\\\", \\\"home_page_url\\\": \\\"https:\/\/brunow.org\/\\\", \\\"feed_url\\\": \\\"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\\\", \\\"items\\\": [${items[*]}]}\"","IFS=PREVIOUS_IFS","","printf \"%s\" \"$feed_json\" > docs\/documentation\/brunow\/feed.json"],"syntax":"sh"},{"type":"paragraph","inlineContent":[{"text":"I find handwriting JSON simple and straightforward, so that’s what I’ve done.","type":"text"},{"type":"text","text":" "},{"text":"The static data is the version, title, home page URL, and feed URL. In","type":"text"},{"text":" ","type":"text"},{"text":"anticipation of adding the dynamic data, I’ve created an array of items and I’ve","type":"text"},{"text":" ","type":"text"},{"text":"added them to the static JSON – I’ll fill out that dynamic data in the items","type":"text"},{"type":"text","text":" "},{"text":"array in a bit. The ","type":"text"},{"type":"codeVoice","code":"IFS"},{"text":" part will be used later – it will join the items in","type":"text"},{"text":" ","type":"text"},{"text":"the items array with a comma. On the last line we print the JSON to a file.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Before we add the dynamic data, let’s look at what our JSON will look like so"},{"type":"text","text":" "},{"type":"text","text":"far, formatted in a nicer way:"}]},{"type":"codeListing","code":["{","    \"version\": \"https:\/\/jsonfeed.org\/version\/1.1\",","    \"title\": \"Brunow\",","    \"home_page_url\": \"https:\/\/brunow.org\/\",","    \"feed_url\": \"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\",","    \"items\": []","}"],"syntax":"json"},{"type":"paragraph","inlineContent":[{"text":"OK, looks good, let’s move on to the dynamic content. We need to fill in that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"items array with posts. Looking at the JSON feed spec, we need data for these"},{"type":"text","text":" "},{"text":"fields:","type":"text"}]},{"items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"content_html"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"date_published"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"id"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"summary"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"title"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"url","type":"codeVoice"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Fortunately, DocC generates an entire folder of JSON files which describe"},{"type":"text","text":" "},{"type":"text","text":"the posts, and we can use values from that JSON to create our items. We’ll use"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/jqlang.github.io\/jq\/","isActive":true},{"type":"text","text":" to parse the JSON:"}]},{"code":["for file in docs\/data\/documentation\/brunow\/*.json","do","  json=`cat \"$file\" | jq`","  id=`printf \"%s\" \"$json\" | jq -r .identifier.url`","  title=`printf \"%s\" \"$json\" | jq -r .metadata.title`","  url=`printf \"%s\" \"$id\" | sed 's#doc:\/\/Brunow\/documentation\/Brunow\/#https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/#g'`","  summary=`printf \"%s\" \"$json\" | jq -r .abstract[]?.text | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/ \/g'`","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","  content_html=\"where can we get this!?!\"","","  if [[ \"$date_published\" != \"null\" ]]","  then","    items+=(\"{\\\"id\\\":\\\"${id}\\\", \\\"title\\\": \\\"${title}\\\", \\\"url\\\": \\\"${url}\\\", \\\"content_html\\\": \\\"${content_html}\\\", \\\"summary\\\": \\\"${summary}\\\", \\\"date_published\\\": \\\"${date_published}T23:59:59-06:00\\\"}\")","  fi","done"],"type":"codeListing","syntax":"sh"},{"inlineContent":[{"type":"text","text":"We loop over each JSON file in the directory, extract the JSON into a variable"},{"type":"text","text":" "},{"text":"with ","type":"text"},{"code":"jq","type":"codeVoice"},{"type":"text","text":", then parse different values from the JSON variable using "},{"type":"codeVoice","code":"jq"},{"type":"text","text":", "},{"type":"codeVoice","code":"sed"},{"text":",","type":"text"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"tr","type":"codeVoice"},{"text":". Here is what one of those items would look like at this point:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"json","code":["{","  ...","  items: [","    {","        \"id\": \"doc:\/\/Brunow\/documentation\/Brunow\/01-01-celebrations\",","        \"title\": \"Celebrations\",","        \"url\": \"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/01-01-celebrations\",","        \"content_html\": \"where can we get this!?!\",","        \"summary\": \"\",","        \"date_published\": \"2016-01-01T23:59:59-06:00\"","    },","    ...","  ]","}"]},{"type":"paragraph","inlineContent":[{"text":"Most of the fields have obvious counterparts in the documentation","type":"text"},{"type":"text","text":" "},{"text":"JSON, but we have to get creative to figure out the ","type":"text"},{"type":"codeVoice","code":"date_published"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"content_html"},{"text":" fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For the ","type":"text"},{"type":"codeVoice","code":"date_published"},{"text":" field, past me set myself up for success by using a","type":"text"},{"type":"text","text":" "},{"text":"date format for the version the documentation applies to, as you can see in the","type":"text"},{"type":"text","text":" "},{"text":"following screenshot. Therefore, I simply need to grab that version and reformat","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it for the date format that JSON feeds expect. Then I’m good to go."}]},{"type":"paragraph","inlineContent":[{"identifier":"dateBasedVersioning","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"content_html"},{"type":"text","text":" field is not as straightforward. Despite the fact that DocC"},{"type":"text","text":" "},{"text":"builds documentation that can be hosted on a web server, it does not build HTML.","type":"text"},{"type":"text","text":" "},{"text":"Instead, it creates a single page application (SPA) that uses JavaScript to","type":"text"},{"type":"text","text":" "},{"text":"parse the documentation’s JSON for rendering. Fortunately, Helge Heß has an open","type":"text"},{"type":"text","text":" "},{"text":"source project, ","type":"text"},{"identifier":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"which takes the output of the DocC generation and parses it into HTML in a very","type":"text"},{"type":"text","text":" "},{"type":"text","text":"similar directory structure. We can use that tool like so:"}]},{"type":"codeListing","syntax":"sh","code":[".\/docc2html docs htmldocs -f -t ..\/docc2html\/Templates"]},{"type":"paragraph","inlineContent":[{"code":"docs","type":"codeVoice"},{"text":" is the output folder from DocC, and ","type":"text"},{"type":"codeVoice","code":"htmldocs"},{"text":" is where I want","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"docc2html"},{"type":"text","text":" to output the HTML. I use "},{"code":"-t","type":"codeVoice"},{"text":" to point to the ","type":"text"},{"code":"docc2html\/Templates","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"folder because I overrode the header in the templates and I want to use that"},{"type":"text","text":" "},{"type":"text","text":"instead of the default. After running this, we have a folder full of HTML"},{"type":"text","text":" "},{"type":"text","text":"files, each of which pairs up with a JSON file in our DocC output. And they are"},{"text":" ","type":"text"},{"type":"text","text":"both named the same, aside from their extensions being different. That makes it"},{"text":" ","type":"text"},{"text":"easy to add this code to our shell script to set the ","type":"text"},{"type":"codeVoice","code":"content_html"},{"type":"text","text":":"}]},{"syntax":"diff","type":"codeListing","code":["...","for file in docs\/data\/documentation\/brunow\/*.json","do","  ...","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","+  filename=$(basename $file .json)","+  html_file=\"htmldocs\/documentation\/brunow\/$filename.html\"","+  content_html=`cat \"${html_file}\" | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g' | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/\\\\\\n\/g' | sed 's\/[\"]\/\\\\\\\"\/g'`","","  if [[ \"$date_published\" != \"null\" ]]","  ...","done","..."]},{"inlineContent":[{"text":"We get the filename without the extension from the JSON filename, then use that","type":"text"},{"type":"text","text":" "},{"text":"filename to set a variable with the contents of the HTML file, plus some","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"escaping to ensure the HTML doesn’t break our JSON."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"And that’s it! I now have a ","type":"text"},{"type":"reference","identifier":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","isActive":true},{"type":"text","text":" to get my"},{"type":"text","text":" "},{"type":"text","text":"latest posts. This solution is not elegant, and it is definitely not performant."},{"text":" ","type":"text"},{"type":"text","text":"But despite being all kinds of hacky, it solves a real problem – even if it has"},{"type":"text","text":" "},{"type":"text","text":"limitations, like not working with some feed services. Here’s what my script"},{"text":" ","type":"text"},{"type":"text","text":"looks like after putting everything together ("},{"isActive":true,"identifier":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","type":"reference"},{"type":"text","text":"):"}]},{"syntax":"sh","type":"codeListing","code":["#! \/bin\/sh","","swift package --allow-writing-to-directory docs \\","  generate-documentation --target Brunow --disable-indexing \\","  --output-path docs --transform-for-static-hosting \\","  --hosting-base-path brunow.org","",".\/docc2html docs htmldocs -f -t ..\/docc2html\/Templates","","items=()","","for file in docs\/data\/documentation\/brunow\/*.json","do","  json=`cat \"$file\" | jq`","  id=`printf \"%s\" \"$json\" | jq -r .identifier.url`","  title=`printf \"%s\" \"$json\" | jq -r .metadata.title`","  url=`printf \"%s\" \"$id\" | sed 's#doc:\/\/Brunow\/documentation\/Brunow\/#https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/#g'`","  summary=`printf \"%s\" \"$json\" | jq -r .abstract[]?.text | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/ \/g'`","  date_published=`printf \"%s\" \"$json\" | jq -r .metadata.platforms[0].introducedAt | tr . -`","","  filename=$(basename $file .json)","  html_file=\"htmldocs\/documentation\/brunow\/$filename.html\"","  content_html=`cat \"${html_file}\" | sed 's#\\\\\\\\#\\\\\\\\\\\\\\\\#g' | sed -e ':a' -e 'N' -e '$!ba' -e 's\/\\n\/\\\\\\n\/g' | sed 's\/[\"]\/\\\\\\\"\/g'`","","  if [[ \"$date_published\" != \"null\" ]]","  then","    items+=(\"{\\\"id\\\":\\\"${id}\\\", \\\"title\\\": \\\"${title}\\\", \\\"url\\\": \\\"${url}\\\", \\\"content_html\\\": \\\"${content_html}\\\", \\\"summary\\\": \\\"${summary}\\\", \\\"date_published\\\": \\\"${date_published}T23:59:59-06:00\\\"}\")","  fi","done","","PREVIOUS_IFS=IFS","IFS=,","feed_json=\"{\\\"version\\\": \\\"https:\/\/jsonfeed.org\/version\/1.1\\\", \\\"title\\\": \\\"Brunow\\\", \\\"home_page_url\\\": \\\"https:\/\/brunow.org\/\\\", \\\"feed_url\\\": \\\"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json\\\", \\\"items\\\": [${items[*]}]}\"","IFS=PREVIOUS_IFS","","printf \"%s\" \"$feed_json\" > docs\/documentation\/brunow\/feed.json","","rm -rf htmldocs"]}],"kind":"content"}],"topicSectionsStyle":"detailedGrid","sections":[],"metadata":{"images":[{"identifier":"jsonFeed.png","type":"card"}],"color":{"standardColorIdentifier":"purple"},"platforms":[{"introducedAt":"2024.06.10","name":"Brunow"}],"modules":[{"name":"Brunow"}],"title":"DocC JSON Feed"},"hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow"],["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2024"]]},"references":{"https://github.com/DoccZz/docc2html?tab=readme-ov-file":{"titleInlineContent":[{"code":"docc2html","type":"codeVoice"}],"url":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","identifier":"https:\/\/github.com\/DoccZz\/docc2html?tab=readme-ov-file","type":"link","title":"docc2html"},"siteHeaderScreenshot.png":{"identifier":"siteHeaderScreenshot.png","alt":"Screenshot of the header of the home page for this site.","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/Brunow\/siteHeaderScreenshot.png"}]},"doc://Brunow/documentation/Brunow":{"title":"Brunow","type":"topic","url":"\/documentation\/brunow","role":"collection","abstract":[{"type":"text","text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he."}],"identifier":"doc:\/\/Brunow\/documentation\/Brunow","kind":"symbol"},"doc://Brunow/documentation/Brunow/Archive":{"kind":"article","title":"Archive","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","type":"topic","abstract":[{"text":"All posts","type":"text"}],"role":"collectionGroup","url":"\/documentation\/brunow\/archive"},"dateBasedVersioning":{"identifier":"dateBasedVersioning","alt":"Screenshot of the top of one of my recent blog posts, showing that the “version” is “Brunow 2024.05.27+”, where 2024.05.27 represents the date that I published the post.","type":"image","variants":[{"url":"\/images\/Brunow\/dateBasedVersioning@2x.png","traits":["2x","light"]}]},"jsonFeed.png":{"identifier":"jsonFeed.png","alt":null,"type":"image","variants":[{"traits":["2x","light"],"url":"\/images\/Brunow\/jsonFeed@2x.png"}]},"https://davidbrunow.github.io/brunow.org/documentation/brunow/feed.json":{"titleInlineContent":[{"type":"text","text":"JSON feed that folks can subscribe to"}],"url":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","identifier":"https:\/\/davidbrunow.github.io\/brunow.org\/documentation\/brunow\/feed.json","title":"JSON feed that folks can subscribe to","type":"link"},"https://github.com/DavidBrunow/brunow.org/blob/main/build-site.sh":{"titleInlineContent":[{"type":"text","text":"GitHub link"}],"url":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","identifier":"https:\/\/github.com\/DavidBrunow\/brunow.org\/blob\/main\/build-site.sh","type":"link","title":"GitHub link"},"https://jqlang.github.io/jq/":{"type":"link","titleInlineContent":[{"code":"jq","type":"codeVoice"}],"title":"jq","url":"https:\/\/jqlang.github.io\/jq\/","identifier":"https:\/\/jqlang.github.io\/jq\/"},"doc://Brunow/documentation/Brunow/2024":{"abstract":[],"type":"topic","kind":"article","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2024","title":"2024","role":"collectionGroup","url":"\/documentation\/brunow\/2024"},"doc://Brunow/documentation/Brunow/06-29-blog-as-documentation":{"images":[{"type":"card","identifier":"siteHeaderScreenshot.png"}],"kind":"article","type":"topic","abstract":[{"type":"text","text":"Intentionally choosing the wrong tool for the job."}],"title":"Blog as Documentation","url":"\/documentation\/brunow\/06-29-blog-as-documentation","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/06-29-blog-as-documentation","role":"article"},"https://www.jsonfeed.org/version/1.1/":{"type":"link","titleInlineContent":[{"type":"text","text":"a detailed specification"}],"title":"a detailed specification","url":"https:\/\/www.jsonfeed.org\/version\/1.1\/","identifier":"https:\/\/www.jsonfeed.org\/version\/1.1\/"}}}
{"abstract":[{"text":"Danger is an excellent tool for providing build tool feedback on pull requests","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"with a flexible plugin architecture, but I find that limiting that flexibility"},{"type":"text","text":" "},{"type":"text","text":"makes it more ergonomic."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSectionsStyle":"detailedGrid","identifier":{"url":"doc:\/\/Brunow\/documentation\/Brunow\/04-22-how-i-like-to-use-danger","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow"],["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2024"]]},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Danger is a tool that connects your CI build systems to your pull requests. This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provides an excellent developer experience where (most of the time) they can"},{"text":" ","type":"text"},{"type":"text","text":"know whether a pull request is in a healthy state by looking at a comment"},{"text":" ","type":"text"},{"text":"directly on that pull request.","type":"text"}]},{"inlineContent":[{"text":"This connection between the CI build systems and the pull request allows teams","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to implement automated code health tools which can give quick feedback to about:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Warnings introduced by the changes","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Linting and code formatting errors based upon agreed-upon standards","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Code coverage percentages","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Any other information which can be automated","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"Danger has two base implementations, one in Ruby and one in JavaScript. On top"},{"type":"text","text":" "},{"type":"text","text":"of that, there are Danger runners written in Kotlin and Swift which hand off the"},{"text":" ","type":"text"},{"type":"text","text":"bulk of the work to Danger JS but allow for Dangerfiles, the file which define"},{"text":" ","type":"text"},{"type":"text","text":"what Danger should do, written in languages that will be more familiar to"},{"text":" ","type":"text"},{"type":"text","text":"mobile developers. I prefer to use Danger Kotlin when building CI for Android or"},{"type":"text","text":" "},{"text":"other Java-based projects and Danger Swift when building CI for Apple","type":"text"},{"type":"text","text":" "},{"text":"platforms, because I find it is easier to get folks involved in CI code when it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is in a language they use every day. It is also more likely that folks in a"},{"type":"text","text":" "},{"type":"text","text":"specific community will create plugins for Danger that you could find useful –"},{"type":"text","text":" "},{"text":"folks using Danger Swift will be more likely to create plugins around Xcode and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"other Apple tooling than folks using Danger Kotlin would."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"OK I think that is enough of an intro to Danger, next I’ll talk through the"},{"type":"text","text":" "},{"text":"flexibility built-in to Danger through its plugin system.","type":"text"}],"type":"paragraph"},{"text":"Danger’s Architecture","type":"heading","level":2,"anchor":"Dangers-Architecture"},{"inlineContent":[{"type":"text","text":"Danger is architected to allow for anyone to create their own plugins that can"},{"text":" ","type":"text"},{"type":"text","text":"provide information to Danger which can then be shown on a pull request. I’ve"},{"text":" ","type":"text"},{"text":"relied on this ability to add plugins to add extra checks that are specific to","type":"text"},{"text":" ","type":"text"},{"text":"our codebase, like a localization linter which ensured that Xcode’s command line","type":"text"},{"type":"text","text":" "},{"text":"tools could extract keys for localization. Out-of-the-box, Danger allows for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"these plugins to be dynamically included at run time which is a lot of"},{"type":"text","text":" "},{"text":"flexibility, especially when using statically typed languages like Kotlin and","type":"text"},{"text":" ","type":"text"},{"text":"Swift.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This plugin architecture is very clever and lets people get started with Danger","type":"text"},{"type":"text","text":" "},{"type":"text","text":"quite easily. But it is a bit complex. Let’s talk through the moving pieces in"},{"text":" ","type":"text"},{"text":"Danger Swift, all of which applies to Danger Kotlin as well:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The Dangerfile","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Danger Swift Library"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The Danger Swift Runner"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Danger JS Runner"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Here is how they are all connected. The Danger Swift runner builds and runs the","type":"text"},{"text":" ","type":"text"},{"text":"Dangerfile while linking in the Danger Swift library. The Danger Swift runner","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then uses the Danger JS runner to interact with the source control platforms"},{"text":" ","type":"text"},{"text":"(GitHub, GitLab, BitBucket, etc). Let’s talk through each of these components in","type":"text"},{"type":"text","text":" "},{"text":"detail.","type":"text"}]},{"level":3,"type":"heading","text":"The Dangerfile","anchor":"The-Dangerfile"},{"inlineContent":[{"text":"The Dangerfile, ","type":"text"},{"type":"codeVoice","code":"Dangerfile.swift"},{"type":"text","text":" for Danger Swift, is the code file that"},{"type":"text","text":" "},{"type":"text","text":"defines everything that Danger will do when Danger is run in a CI pipeline. Here"},{"type":"text","text":" "},{"type":"text","text":"is a simplified example of a Dangerfile from"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/danger.systems\/swift\/","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["import Danger","let danger = Danger()","","\/\/ Add a CHANGELOG entry for app changes","let hasChangelog = danger.git.modifiedFiles.contains(\"changelog.md\")","","if (!hasChangelog) {","    warn(\"Please add a changelog entry for your changes.\")","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This simple example checks to see if the "},{"type":"codeVoice","code":"changelog.md"},{"text":" file has been modified","type":"text"},{"text":" ","type":"text"},{"text":"as part of the pull request and, if not, adds a warning to the pull request","type":"text"},{"type":"text","text":" "},{"type":"text","text":"letting the developer know that they need to update the changelog. Providing"},{"type":"text","text":" "},{"type":"text","text":"that feedback through this automation means that a contributor to a repo can"},{"type":"text","text":" "},{"type":"text","text":"quickly learn what changes they need to make to meet the standards of that repo."},{"type":"text","text":" "},{"text":"Plus, the maintainer of the repo can focus on things only humans can do, like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making sure that the pull request follows their architectural guidelines."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"At the beginning of every Dangerfile, the Danger library must be imported. Let’s","type":"text"},{"type":"text","text":" "},{"text":"talk about how that works next.","type":"text"}]},{"text":"The Danger Swift Library","anchor":"The-Danger-Swift-Library","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The Danger Swift library is what powers the different things you can do in a"},{"type":"text","text":" "},{"text":"Dangerfile. The library is built with the core Danger functionality plus any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"plugins that you’ve chosen to integrate. The documentation recommends"},{"type":"text","text":" "},{"text":"integrating Danger into your workflow by","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/danger.systems\/swift\/guides\/about_the_dangerfile#swift-package-manager-more-performant"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"This allows the Danger Swift library to be built as-needed with just the plugins","type":"text"},{"text":" ","type":"text"},{"text":"you’ve defined and puts everything in the right place so Swift can find the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"library when running the Dangerfile."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"I’m not a fan of this approach but I’ll talk through that later when I go","type":"text"},{"type":"text","text":" "},{"type":"text","text":"through how I like to use Danger."}]},{"anchor":"The-Danger-Swift-Runner","type":"heading","text":"The Danger Swift Runner","level":3},{"inlineContent":[{"type":"text","text":"The Danger Swift runner is a fairly simple tool that ties everything together."},{"type":"text","text":" "},{"text":"As mentioned before, it runs the Dangerfile while also providing the path to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Danger Swift library. This could easily be a standalone executable, but in the"},{"text":" ","type":"text"},{"text":"recommended setup, linked above in the Danger Swift library section, the runner","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is re-built through Swift Package Manager every time it is needed to be run."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to running the Dangerfile, the Danger Swift runner runs the Danger"},{"type":"text","text":" "},{"text":"JS runner, which handles all communication with the source control platforms.","type":"text"}]},{"anchor":"The-Danger-JS-Runner","level":3,"text":"The Danger JS Runner","type":"heading"},{"inlineContent":[{"type":"text","text":"As mentioned before, the Danger JS runner is the common tool across the"},{"type":"text","text":" "},{"type":"text","text":"different Danger “front-ends” (Danger Swift, Danger Kotlin, etc.) that handles"},{"type":"text","text":" "},{"type":"text","text":"all the interactions with source control platforms. These interactions are"},{"type":"text","text":" "},{"text":"bi-directional because the Dangerfile needs access to information from those","type":"text"},{"type":"text","text":" "},{"text":"platforms and also needs to send information to them for warnings, errors, and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"informational messages."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Strangely, I don’t see anything about how to install Danger JS, or even the need"},{"text":" ","type":"text"},{"type":"text","text":"to do so, in "},{"isActive":true,"identifier":"https:\/\/danger.systems\/swift\/guides\/getting_started","type":"reference"},{"text":". I","type":"text"},{"type":"text","text":" "},{"type":"text","text":"prefer to install Danger JS through npm, which I prefer to install through"},{"type":"text","text":" "},{"type":"text","text":"Homebrew. Here are the steps to do that:"}]},{"syntax":"sh","code":["brew install node","npm install -g danger"],"type":"codeListing"},{"anchor":"How-I-Setup-Danger","level":2,"text":"How I Setup Danger","type":"heading"},{"inlineContent":[{"text":"Now that we know how all the pieces fit together, I’ll gripe about the things","type":"text"},{"type":"text","text":" "},{"text":"I don’t like about this approach and talk about how I like to set things up.","type":"text"}],"type":"paragraph"},{"anchor":"Gripes","level":3,"type":"heading","text":"Gripes"},{"inlineContent":[{"type":"text","text":"All of my gripes revolve around the need to use Swift Package Manager to build"},{"type":"text","text":" "},{"text":"and run the runner and library:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"I don’t like to mix tooling and my app’s dependencies","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"I don’t always want to use SPM"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"I don’t want to re-build Danger on every run"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The recommended approach is invasive to my project, requiring me to add a"},{"text":" ","type":"text"},{"type":"text","text":"folder that will not be used"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Due to the invasive nature of the recommended approach, applying the same"},{"type":"text","text":" "},{"text":"Danger configurations across multiple repos, and keeping those configurations in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sync, it creates a lot of manual overhead"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"I like pre-built binaries"}]}]}]},{"inlineContent":[{"text":"What I want is a pre-built executable for the Danger Swift runner, and a","type":"text"},{"type":"text","text":" "},{"text":"pre-built framework for the Danger Swift library. Let’s talk about how I make","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that work."}],"type":"paragraph"},{"anchor":"My-Setup","text":"My Setup","type":"heading","level":3},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"This setup requires a fork of Danger Swift."}],"type":"paragraph"}]},{"level":4,"type":"heading","text":"The Runner","anchor":"The-Runner"},{"inlineContent":[{"text":"The Danger Swift runner is already meant to be a standalone executable, so we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"don’t need to do too much there. We want to make sure that it is built as a"},{"type":"text","text":" "},{"text":"universal binary so it can run on both Apple Silicon and Intel, so we can build","type":"text"},{"type":"text","text":" "},{"text":"it like this:","type":"text"}],"type":"paragraph"},{"syntax":"sh","type":"codeListing","code":["swift build -c release --arch arm64 --arch x86_64"]},{"inlineContent":[{"type":"text","text":"Swift builds the "},{"type":"codeVoice","code":"danger-swift"},{"type":"text","text":" binary and puts it in the"},{"text":" ","type":"text"},{"type":"text","text":"“.build\/apple\/Products\/Release\/danger-swift” folder so we’ll need to copy it"},{"type":"text","text":" "},{"type":"text","text":"from there to where we need it. All of that is simple and straightforward."}],"type":"paragraph"},{"anchor":"The-Library","type":"heading","level":4,"text":"The Library"},{"inlineContent":[{"type":"text","text":"Building the library in a portable way isn’t quite as nice, but we’ll get to"},{"text":" ","type":"text"},{"text":"that in a moment. First, since we want a portable library that can be used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"anywhere, we need to find a way to build that library with all the plugins we"},{"type":"text","text":" "},{"text":"need. This approach requires choosing your plugins ahead of time and not being","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to do so at run time – if you want a new plugin you’ll need to rebuild and"},{"type":"text","text":" "},{"type":"text","text":"redistribute the library."}],"type":"paragraph"},{"text":"Integrating Plugins","anchor":"Integrating-Plugins","type":"heading","level":5},{"type":"paragraph","inlineContent":[{"text":"Fortunately, Danger Swift has already gone through the process of integrating a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"common plugin, SwiftLint, into the library so we can follow the maintainer’s"},{"type":"text","text":" "},{"type":"text","text":"lead and do the same thing for our plugins. There is already a “Plugins” folder"},{"text":" ","type":"text"},{"type":"text","text":"in the “Sources\/Danger” folder and adding our plugin there is quite simple – we"},{"text":" ","type":"text"},{"type":"text","text":"copy the source code folder into the “Plugins” folder and then make whatever"},{"type":"text","text":" "},{"text":"changes are need to make the Danger library successfully compile again. Doing","type":"text"},{"type":"text","text":" "},{"text":"that requires fixing any naming conflicts and, while we’re in there, we’ll fix","type":"text"},{"type":"text","text":" "},{"type":"text","text":"warnings around importing Danger by removing any "},{"code":"import Danger","type":"codeVoice"},{"text":" code. Let’s","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"walk through an example with a popular plugin, "},{"identifier":"https:\/\/github.com\/f-meloni\/danger-swift-coverage","isActive":true,"type":"reference"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which gathers code coverage so it can be posted on pull requests."}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Fork Danger Swift and clone the fork to your machine"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clone DangerSwiftCoverage to your machine"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Copy the “Sources\/DangerSwiftCoverage” folder from DangerSwiftCoverage into"},{"text":" ","type":"text"},{"type":"text","text":"the “Sources\/Danger\/Plugins” folder in Danger Swift. If you cloned the two repos"},{"type":"text","text":" "},{"type":"text","text":"next to each other, the copy command from the root of the Danger Swift repo"},{"type":"text","text":" "},{"type":"text","text":"would look like this:"}]}]}]},{"type":"codeListing","code":["cp -r ..\/danger-swift-coverage\/Sources\/DangerSwiftCoverage Sources\/Danger\/Plugins"],"syntax":"sh"},{"type":"orderedList","start":4,"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open Danger Swift’s Package.swift in Xcode and try to build the Danger"},{"type":"text","text":" "},{"type":"text","text":"library."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Follow the compiler errors to fix all the build issues around multiple files"},{"text":" ","type":"text"},{"type":"text","text":"and types with conflicting names:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Rename the file “Sources\/Danger\/DangerSwiftCoverage\/Models\/Report.swift”"},{"text":" ","type":"text"},{"text":"to “Sources\/Danger\/DangerSwiftCoverage\/Models\/DangerSwiftCoverageReport.swift”","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Rename the ","type":"text"},{"code":"File","type":"codeVoice"},{"type":"text","text":" struct on line 34 of “XcodeBuildCoverage.swift” to"},{"type":"text","text":" "},{"type":"codeVoice","code":"XcodeBuildCoverageFile"},{"type":"text","text":" and update the type of "},{"type":"codeVoice","code":"files"},{"type":"text","text":" on line 26 of the same"},{"text":" ","type":"text"},{"type":"text","text":"file to use the "},{"type":"codeVoice","code":"XcodeBuildCoverageFile"},{"type":"text","text":" type."}]}]},{"content":[{"inlineContent":[{"text":"Remove the ","type":"text"},{"type":"codeVoice","code":"import Danger"},{"type":"text","text":" from the top of the “XcodeBuildCoverage.swift”"},{"text":" ","type":"text"},{"type":"text","text":"file."}],"type":"paragraph"}]}]}]}]},{"inlineContent":[{"text":"OK, now we’ve integrated a plugin directly into the Danger library which means","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that plugin will always be available in our Dangerfiles when linking against a"},{"text":" ","type":"text"},{"type":"text","text":"pre-built version of the library. Here are all the open source plugins I like"},{"type":"text","text":" "},{"text":"to include, and integrating them, or any others you may find, should follow the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"same steps as above:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"https:\/\/github.com\/f-meloni\/danger-swift-coverage","overridingTitle":"DangerSwiftCoverage","overridingTitleInlineContent":[{"text":"DangerSwiftCoverage","type":"text"}],"type":"reference"},{"type":"text","text":" (mentioned above)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/f-meloni\/danger-swift-xcodesummary"},{"text":" (yes, Xcode is misspelled, but still a good plugin)","type":"text"}]}]}],"type":"unorderedList"},{"text":"Building a Portable Library","anchor":"Building-a-Portable-Library","level":5,"type":"heading"},{"inlineContent":[{"type":"text","text":"As the Swift package is setup, there is no way to create a portable library. The"},{"type":"text","text":" "},{"type":"text","text":"reason is that the "},{"code":"swift build","type":"codeVoice"},{"text":" command will not create a framework like we’re","type":"text"},{"type":"text","text":" "},{"type":"text","text":"used to working with on iOS. Instead, it creates a folder full of object,"},{"text":" ","type":"text"},{"text":".swiftmodule, and .dylib files:","type":"text"}],"type":"paragraph"},{"syntax":"sh","type":"codeListing","code":["$ ls .build\/apple\/Products\/Release                 ","Danger-Swift.o                          Danger_Swift.swiftmodule    RunnerLib.o","Danger.o                                Logger.o                    RunnerLib.swiftmodule","Danger.swiftmodule                      Logger.swiftmodule          Version.o","DangerDependenciesResolver.o            OctoKit.o                   Version.swiftmodule","DangerDependenciesResolver.swiftmodule  OctoKit.swiftmodule         danger-swift","DangerFixtures.o                        PackageFrameworks           danger-swift.dSYM","DangerFixtures.swiftmodule              RequestKit.o                libDanger.dylib","DangerShellExecutor.o                   RequestKit.swiftmodule      libDanger.dylib.dSYM","DangerShellExecutor.swiftmodule         Runner.swiftmodule"]},{"inlineContent":[{"type":"text","text":"This is not very portable. We need almost all of these files to be able to link"},{"text":" ","type":"text"},{"type":"text","text":"against libDanger.dylib. Plus, these files are tied to a specific Swift version"},{"type":"text","text":" "},{"text":"because ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/www.swift.org\/blog\/library-evolution\/"},{"type":"text","text":" is"},{"text":" ","type":"text"},{"text":"not turned on. This means that when you change the default version of Xcode on a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"machine, and therefore change the default version of Swift, you’ll need to"},{"type":"text","text":" "},{"text":"rebuild the Danger Swift library. I’ve worked around this in the past by keeping","type":"text"},{"text":" ","type":"text"},{"text":"an older version of Xcode on the build machines that is only used to run Danger","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Swift, but it is easy to forget why you’re doing that and inadvertently break"},{"type":"text","text":" "},{"text":"things.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"It might be possible to use library evolution with this libDanger.dylib","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and the object files, but I was not able to make it work."}]}],"name":"Note","type":"aside"},{"type":"paragraph","inlineContent":[{"text":"To get a framework, which I find to be much more portable, you must use an Xcode","type":"text"},{"type":"text","text":" "},{"type":"text","text":"project file, which I’ve added on this"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/danger\/swift\/pull\/579"},{"text":". That pull request","type":"text"},{"type":"text","text":" "},{"type":"text","text":"also changes the Danger Swift library’s imports to be "},{"type":"reference","identifier":"https:\/\/forums.swift.org\/t\/update-on-implementation-only-imports\/26996","isActive":true},{"text":" ","type":"text"},{"text":"imports which tells the linker that the symbols within those imports won’t be","type":"text"},{"type":"text","text":" "},{"text":"exposed publicly. And finally, that pull request tells the Danger Swift runner","type":"text"},{"type":"text","text":" "},{"text":"to look for a “Danger.framework” to link against when running the Dangerfile.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once that is done, you can run this command to generate the framework:"}]},{"type":"codeListing","syntax":"sh","code":["xcodebuild archive -project Danger.xcodeproj \\","  -scheme Danger -sdk macosx -destination \"generic\/platform=macOS\" \\","  -archivePath \"archives\/Danger.framework\""]},{"inlineContent":[{"text":"I’ve added a","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/danger\/swift\/pull\/579\/files#diff-ee93d24b11504c134791a4e4232fc7ccb850be02de509fd76431a30509bf675e"},{"type":"text","text":"."}],"type":"paragraph"},{"level":3,"type":"heading","anchor":"Using-this-Setup","text":"Using this Setup"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have an executable binary and a framework, how do we use them in our"},{"text":" ","type":"text"},{"type":"text","text":"CI jobs? Each of them is portable, so we can put them where we need them. I like"},{"type":"text","text":" "},{"text":"to store all of my CI tooling in a centralized place, which I’ve talked about in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"my "},{"isActive":true,"type":"reference","overridingTitle":"previous blog post on CI tooling","overridingTitleInlineContent":[{"type":"text","text":"previous blog post on CI tooling"}],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/04-21-ci-tooling"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you don’t want to, or can’t, use that centralized place, then you need to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"make sure that the "},{"code":"danger-swift","type":"codeVoice"},{"text":" executable and the Danger.framework library","type":"text"},{"text":" ","type":"text"},{"text":"are in the same directory when you run ","type":"text"},{"type":"codeVoice","code":"danger-swift"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"Once you have them there, you’ll want to do something like this in your CI job:","type":"text"}],"type":"paragraph"},{"syntax":"sh","type":"codeListing","code":["...","brew install node","npm install -g danger","danger-swift ci","..."]}]}],"metadata":{"modules":[{"name":"Brunow"}],"images":[{"identifier":"exampleDangerReport.png","type":"card"}],"color":{"standardColorIdentifier":"purple"},"title":"How I Like to Use Danger","platforms":[{"name":"Brunow","introducedAt":"2024.04.22"}]},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/brunow\/04-22-how-i-like-to-use-danger"]}],"references":{"exampleDangerReport.png":{"identifier":"exampleDangerReport.png","variants":[{"url":"\/images\/Brunow\/exampleDangerReport@1x.png","traits":["1x","light"]}],"alt":null,"type":"image"},"https://github.com/f-meloni/danger-swift-coverage":{"identifier":"https:\/\/github.com\/f-meloni\/danger-swift-coverage","titleInlineContent":[{"text":"DangerSwiftCoverage","type":"text"}],"title":"DangerSwiftCoverage","url":"https:\/\/github.com\/f-meloni\/danger-swift-coverage","type":"link"},"https://danger.systems/swift/":{"identifier":"https:\/\/danger.systems\/swift\/","titleInlineContent":[{"text":"Danger Swift’s documentation","type":"text"}],"title":"Danger Swift’s documentation","url":"https:\/\/danger.systems\/swift\/","type":"link"},"doc://Brunow/documentation/Brunow/04-21-ci-tooling":{"role":"article","abstract":[{"text":"Storing CI tools in a centralized location to be used across the pipelines for","type":"text"},{"text":" ","type":"text"},{"text":"multiple projects.","type":"text"}],"type":"topic","kind":"article","title":"CI Tooling","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/04-21-ci-tooling","images":[{"type":"card","identifier":"allChecksHavePassed.png"}],"url":"\/documentation\/brunow\/04-21-ci-tooling"},"doc://Brunow/documentation/Brunow":{"type":"topic","title":"Brunow","url":"\/documentation\/brunow","identifier":"doc:\/\/Brunow\/documentation\/Brunow","kind":"symbol","abstract":[{"text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he.","type":"text"}],"role":"collection"},"https://danger.systems/swift/guides/getting_started":{"titleInlineContent":[{"text":"the Danger Swift documentation","type":"text"}],"title":"the Danger Swift documentation","type":"link","identifier":"https:\/\/danger.systems\/swift\/guides\/getting_started","url":"https:\/\/danger.systems\/swift\/guides\/getting_started"},"allChecksHavePassed.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Brunow\/allChecksHavePassed@1x.png"}],"identifier":"allChecksHavePassed.png","alt":"Screenshot of the GitHub interface showing that all CI checks have passed.","type":"image"},"https://www.swift.org/blog/library-evolution/":{"titleInlineContent":[{"text":"library evolution","type":"text"}],"title":"library evolution","type":"link","identifier":"https:\/\/www.swift.org\/blog\/library-evolution\/","url":"https:\/\/www.swift.org\/blog\/library-evolution\/"},"https://github.com/f-meloni/danger-swift-xcodesummary":{"titleInlineContent":[{"text":"DangerXCodeSummary","type":"text"}],"title":"DangerXCodeSummary","identifier":"https:\/\/github.com\/f-meloni\/danger-swift-xcodesummary","type":"link","url":"https:\/\/github.com\/f-meloni\/danger-swift-xcodesummary"},"https://github.com/danger/swift/pull/579/files#diff-ee93d24b11504c134791a4e4232fc7ccb850be02de509fd76431a30509bf675e":{"titleInlineContent":[{"text":"shell script on that pull request that builds both the runner and the library","type":"text"}],"title":"shell script on that pull request that builds both the runner and the library","type":"link","identifier":"https:\/\/github.com\/danger\/swift\/pull\/579\/files#diff-ee93d24b11504c134791a4e4232fc7ccb850be02de509fd76431a30509bf675e","url":"https:\/\/github.com\/danger\/swift\/pull\/579\/files#diff-ee93d24b11504c134791a4e4232fc7ccb850be02de509fd76431a30509bf675e"},"https://danger.systems/swift/guides/about_the_dangerfile#swift-package-manager-more-performant":{"titleInlineContent":[{"text":"adding Danger Swift and any related plugins to your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":" file","type":"text"}],"title":"adding Danger Swift and any related plugins to your Package.swift file","identifier":"https:\/\/danger.systems\/swift\/guides\/about_the_dangerfile#swift-package-manager-more-performant","type":"link","url":"https:\/\/danger.systems\/swift\/guides\/about_the_dangerfile#swift-package-manager-more-performant"},"https://github.com/danger/swift/pull/579":{"titleInlineContent":[{"text":"proof of concept pull request for showing how to have a pre-built library that uses library evolution","type":"text"}],"title":"proof of concept pull request for showing how to have a pre-built library that uses library evolution","identifier":"https:\/\/github.com\/danger\/swift\/pull\/579","type":"link","url":"https:\/\/github.com\/danger\/swift\/pull\/579"},"https://forums.swift.org/t/update-on-implementation-only-imports/26996":{"titleInlineContent":[{"code":"@_implementationOnly","type":"codeVoice"}],"url":"https:\/\/forums.swift.org\/t\/update-on-implementation-only-imports\/26996","title":"@_implementationOnly","type":"link","identifier":"https:\/\/forums.swift.org\/t\/update-on-implementation-only-imports\/26996"},"doc://Brunow/documentation/Brunow/2024":{"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2024","url":"\/documentation\/brunow\/2024","abstract":[],"title":"2024","role":"collectionGroup","kind":"article","type":"topic"},"doc://Brunow/documentation/Brunow/Archive":{"kind":"article","type":"topic","title":"Archive","abstract":[{"text":"All posts","type":"text"}],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","role":"collectionGroup","url":"\/documentation\/brunow\/archive"}}}
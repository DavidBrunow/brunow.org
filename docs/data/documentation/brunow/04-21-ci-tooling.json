{"abstract":[{"type":"text","text":"Storing CI tools in a centralized location to be used across the pipelines for"},{"text":" ","type":"text"},{"text":"multiple projects.","type":"text"}],"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"platforms":[{"introducedAt":"2024.04.21","name":"Brunow"}],"title":"CI Tooling","modules":[{"name":"Brunow"}],"color":{"standardColorIdentifier":"purple"},"images":[{"type":"card","identifier":"allChecksHavePassed.png"}]},"hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow"],["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2024"]]},"identifier":{"url":"doc:\/\/Brunow\/documentation\/Brunow\/04-21-ci-tooling","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/brunow\/04-21-ci-tooling"]}],"sections":[],"topicSectionsStyle":"detailedGrid","primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When I was working at my previous employer, I took charge of the CI architecture"},{"type":"text","text":" "},{"type":"text","text":"for Apple platforms. The CI supported the main customer-facing app, which was"},{"text":" ","type":"text"},{"text":"modularized with each module living in its own repo. This meant that we needed","type":"text"},{"type":"text","text":" "},{"text":"our CI architecture to support many repos. Since CI architecture wasn’t my","type":"text"},{"type":"text","text":" "},{"type":"text","text":"primary responsibility (I was a senior iOS developer on a platform team), I also"},{"type":"text","text":" "},{"type":"text","text":"needed the system to be easily maintained from as few places as possible – I"},{"text":" ","type":"text"},{"text":"really did not want to update every module repo every time we wanted to add new","type":"text"},{"type":"text","text":" "},{"text":"functionality to our CI pipelines.","type":"text"}]},{"inlineContent":[{"type":"text","text":"My solution was to have the bare minimum of CI infrastructure in the repos and"},{"type":"text","text":" "},{"type":"text","text":"have everything else living in a separate repo which could be cloned during the"},{"text":" ","type":"text"},{"text":"CI job. When I first implemented this at my previous employer we were using","type":"text"},{"type":"text","text":" "},{"type":"text","text":"GitHub Enterprise for our source control platform and Jenkins for CI, so that"},{"text":" ","type":"text"},{"type":"text","text":"meant that every repo had a Jenkinsfile but nothing else related to CI. When I"},{"type":"text","text":" "},{"type":"text","text":"migrated the team from GitHub Enterprise to the hosted GitHub and switched CI to"},{"text":" ","type":"text"},{"type":"text","text":"GitHub Actions, every repo had a yaml file defining their actions but nothing"},{"text":" ","type":"text"},{"type":"text","text":"else related to CI. In both of these situations, updating the Jenkinsfiles or"},{"type":"text","text":" "},{"type":"text","text":"GitHub Actions yaml files across modules was painful, but it was also rare."}],"type":"paragraph"},{"inlineContent":[{"text":"When I started working at my current employer, they already had a similar app","type":"text"},{"type":"text","text":" "},{"text":"architecture that was modularized with each module in a separate repo. At that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"time, we were using a hosted BitBucket instance for our source control platform"},{"text":" ","type":"text"},{"type":"text","text":"and Jenkins for CI so I implemented a similar pattern to what I had at my"},{"type":"text","text":" "},{"type":"text","text":"previous employer – each repo only had a Jenkinsfile in it and all the tools"},{"text":" ","type":"text"},{"type":"text","text":"were hosted in a separate repo. Then when I migrated the team to a hosted GitLab"},{"text":" ","type":"text"},{"type":"text","text":"instance, I was able to build things in such a way that each repo had no"},{"type":"text","text":" "},{"type":"text","text":"references to CI in the codebase – instead, the settings for each repo point to"},{"text":" ","type":"text"},{"type":"text","text":"a centralized configuration file in that same separate repo that holds the rest"},{"type":"text","text":" "},{"type":"text","text":"of the CI tooling."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The current state of our CI architecture is working really well for us, so in"},{"type":"text","text":" "},{"text":"this post I’d like to share one bit that I think is critical – this separate","type":"text"},{"type":"text","text":" "},{"type":"text","text":"repo of CI tooling that provides everything a repo needs to run its CI jobs."}],"type":"paragraph"},{"text":"The CI Tooling Repository","type":"heading","anchor":"The-CI-Tooling-Repository","level":2},{"text":"What It Is","level":3,"type":"heading","anchor":"What-It-Is"},{"inlineContent":[{"type":"text","text":"The CI Tooling repository is simply another repo that holds all the tools needed"},{"text":" ","type":"text"},{"text":"for CI, with only two things that make it work differently from other repos:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"The repository does not use the main branch, instead it uses a branch per","type":"text"},{"type":"text","text":" "},{"type":"text","text":"supported platform"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The repository knows how to “unpack” itself so that its contents get put in"},{"type":"text","text":" "},{"text":"the right places","type":"text"}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Let’s talk through each of those in more detail.","type":"text"}]},{"text":"Branch per Supported Platform","level":4,"type":"heading","anchor":"Branch-per-Supported-Platform"},{"type":"paragraph","inlineContent":[{"text":"When I say “supported platform” here, I mean the type of thing being built. For","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"example, at my current employer the CI infrastructure I’ve built supports both"},{"text":" ","type":"text"},{"type":"text","text":"our Android app and our apps for Apple platforms (iOS, watchOS, and macOS"},{"type":"text","text":" "},{"text":"command line tools). Therefore, our CI Tooling repo has two primary branches,","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"apple"},{"type":"text","text":" for Apple platforms, and "},{"type":"codeVoice","code":"android"},{"type":"text","text":" for the Android app."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When we want to make improvements to our Apple CI, we create a branch off of our"},{"type":"text","text":" "},{"code":"apple","type":"codeVoice"},{"type":"text","text":" branch, do the work, and create a merge request back into the "},{"type":"codeVoice","code":"apple"},{"type":"text","text":" "},{"text":"branch. This does mean some duplicated work at times – some things we do on CI","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are common across platforms, like tagging releases – but my current stance is"},{"type":"text","text":" "},{"text":"that that duplicated work is less effort and less error-prone than putting all","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"our tooling together onto one branch. We’re also looking into ways to abstract"},{"type":"text","text":" "},{"text":"out some of that duplicated work.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"In reality, our naming at my current employer is not quite this simple","type":"text"},{"text":" ","type":"text"},{"text":"at the moment because I thought it would be useful to have more specific","type":"text"},{"text":" ","type":"text"},{"text":"branch naming. The branch name we use for Apple platforms is currently","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"apple\/xcode14-dangerSwiftLint-dangerSwiftFormat"},{"type":"text","text":" – I thought that including"},{"text":" ","type":"text"},{"text":"the capabilities enabled by the branch in the branch name would be useful but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it simply made things more complicated while providing no benefit."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We’ll be moving to simpler names in the near future which is why I feel OK"},{"type":"text","text":" "},{"text":"putting this in a note rather than inline above.","type":"text"}]}],"type":"aside","style":"note"},{"text":"Unpacking the CI Tooling","type":"heading","level":4,"anchor":"Unpacking-the-CI-Tooling"},{"inlineContent":[{"text":"For maximum flexibility, it is really useful for the CI tooling repo to know how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to put its tools in the right place. One example is the Dangerfile – it must be"},{"text":" ","type":"text"},{"type":"text","text":"in the root of the repo on which you want to run Danger. But maintaining a"},{"text":" ","type":"text"},{"text":"separate Dangerfile in every repo when you have tens of repos is unwieldy. It is","type":"text"},{"text":" ","type":"text"},{"text":"much simpler to have a single Dangerfile in the CI tooling repo which can then","type":"text"},{"type":"text","text":" "},{"text":"be placed in the right place when unpacked. And it is much more flexible for the","type":"text"},{"type":"text","text":" "},{"text":"CI Tooling repo to own that unpacking so that its contents can be re-organized,","type":"text"},{"type":"text","text":" "},{"text":"or new contents can be added, without anything outside the repo needing to be","type":"text"},{"type":"text","text":" "},{"text":"changed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To do that, the CI tooling repo needs a script which I like to call ","type":"text"},{"type":"codeVoice","code":"unpack.sh"},{"type":"text","text":"."},{"type":"text","text":" "},{"text":"This script does two main things:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Deletes the .git folder from the checked-out CI tooling repo so any git","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"operations will be performed on the repo where the CI job is being run, and"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Puts files where they are needed for CI to function properly"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"code":"unpack.sh","type":"codeVoice"},{"text":" that moves a Dangerfile.swift to the right place could look like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"code":["#! \/bin\/sh","","rm -rf $(dirname \"$0\")\/.git","","# Move things out of the CI-Tooling repo here","mv $(dirname \"$0\")\/Dangerfile.swift $(dirname \"$0\")\/.."],"type":"codeListing","syntax":"sh"},{"anchor":"What-Tools-We-Keep-In-It","text":"What Tools We Keep In It","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"These are the kinds of tools I like to keep in the CI Tooling repo:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Danger Swift pre-built binaries, both executable and library","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Dangerfile"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pre-built Swift tool to parse formatted commits","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Pre-built swiftlint binary"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Pre-built Swift tool to show public API diffs","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Fastlane files (Fastfile and Matchfile)"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Any other pre-built binaries or tools that are only used on CI","type":"text"}]}]}]},{"level":3,"anchor":"What-We-Do-Not-Keep-In-It","type":"heading","text":"What We Do Not Keep In It"},{"type":"paragraph","inlineContent":[{"text":"There are some things that we want in common across all our modules that we do","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not keep in CI Tooling. The determinant for this is whether developers need to"},{"type":"text","text":" "},{"type":"text","text":"use those things locally as well, such as configuration files for SwiftLint and"},{"type":"text","text":" "},{"type":"text","text":"Swift Format. We want our developers to get warnings and errors from those tools"},{"type":"text","text":" "},{"text":"early, in their IDE, so we need those configurations inside the module repos","type":"text"},{"type":"text","text":" "},{"type":"text","text":"rather than being in CI Tooling."}]},{"level":3,"anchor":"How-to-Use-It","type":"heading","text":"How to Use It"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using this repo is fairly simple – clone the repo with a depth of 1 to only"},{"type":"text","text":" "},{"text":"clone the last commit, run the ","type":"text"},{"code":"unpack.sh","type":"codeVoice"},{"type":"text","text":" script, and then use the tools within"},{"text":" ","type":"text"},{"type":"text","text":"the repo as you would in any other script. For example:"}]},{"type":"codeListing","code":["...","git clone https:\/\/www.github.com\/DavidBrunow\/CI-Tooling.git --depth 1",".\/CI-Tooling\/unpack.sh","fastlane run_tests","..."],"syntax":"sh"},{"level":3,"type":"heading","anchor":"Keys-to-Success","text":"Keys to Success"},{"type":"paragraph","inlineContent":[{"text":"The biggest key to success is ensuring that you have consistency across your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"different repos. This means having a standard folder structure, standard tools"},{"text":" ","type":"text"},{"type":"text","text":"used, code quality standards, and one module per repo. A bonus side effect of"},{"type":"text","text":" "},{"type":"text","text":"this approach is that humans love consistency as well – it will be easier for"},{"text":" ","type":"text"},{"text":"your team to work within consistent repos than it would be if every repo follows","type":"text"},{"type":"text","text":" "},{"text":"its own rules.","type":"text"}]},{"inlineContent":[{"type":"text","text":"But also, you will always have exceptions."}],"type":"paragraph"},{"inlineContent":[{"text":"Sometimes it makes sense to special case those exceptions in your tooling. For","type":"text"},{"type":"text","text":" "},{"text":"example, we have some legacy repos that we don’t want to use ","type":"text"},{"type":"codeVoice","code":"swift-format"},{"type":"text","text":" on"},{"text":" ","type":"text"},{"type":"text","text":"because it would cause a massive amount of churn and we don’t see the value in"},{"text":" ","type":"text"},{"type":"text","text":"that churn with the legacy code. We have chosen to special case those repos by"},{"text":" ","type":"text"},{"type":"text","text":"testing for the existence of a "},{"type":"codeVoice","code":".swift-format"},{"type":"text","text":" configuration file in the"},{"type":"text","text":" "},{"text":"repo. When possible, I like to use something specific to the tool being used to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"function like a feature flag. For other situations, we’ve had to special case by"},{"text":" ","type":"text"},{"type":"text","text":"individual module names, which I only do if there is no other way to solve the"},{"type":"text","text":" "},{"text":"problem.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Sometimes it makes sense to have entirely different tooling for different"},{"type":"text","text":" "},{"type":"text","text":"contexts. For example, we have different CI pipeline definitions for modules vs."},{"type":"text","text":" "},{"text":"the main app – there are enough differences between the two that it is easier to","type":"text"},{"type":"text","text":" "},{"text":"maintain two different files, each with a clear focus, than to try to put","type":"text"},{"type":"text","text":" "},{"type":"text","text":"everything into a single file."}],"type":"paragraph"},{"text":"Example","anchor":"Example","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"I’ve setup an example of my CI Tooling pattern in the repo for a"},{"text":" ","type":"text"},{"identifier":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You can see the “client” side in the ","type":"text"},{"identifier":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser\/blob\/main\/.github\/workflows\/pull_request.yml","isActive":true,"type":"reference"},{"type":"text","text":". It is simple enough that I can just"},{"text":" ","type":"text"},{"type":"text","text":"copy it here:"}],"type":"paragraph"},{"type":"codeListing","syntax":"yml","code":["on:","  pull_request:","","jobs:","  ci_tooling:","    uses: DavidBrunow\/CI-Tooling\/.github\/workflows\/macos-tools-pull-request-action.yml@apple","    permissions:","      pull-requests: write"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Lines 1 and 2 say that this action should be run on pull requests. Line 6 says"},{"type":"text","text":" "},{"type":"text","text":"that this pipeline should use the shared pipeline in my CI-Tooling repo, using"},{"type":"text","text":" "},{"text":"the configuration in ","type":"text"},{"type":"codeVoice","code":".github\/workflows\/macos-tools-pull-request-action.yml"},{"text":" on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the branch "},{"type":"codeVoice","code":"apple"},{"type":"text","text":". Lines 7 and 8 give the shared pipeline permission to add"},{"type":"text","text":" "},{"text":"comments to the pull request, which is needed for Danger Swift to add its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feedback."}]},{"inlineContent":[{"type":"text","text":"You can see the shared CI Tooling side for that action in"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-pull-request-action.yml","isActive":true,"type":"reference"},{"type":"text","text":". This file is more"},{"type":"text","text":" "},{"text":"complex because it is doing all the work – the client’s file is only calling","type":"text"},{"type":"text","text":" "},{"type":"text","text":"into this one. I’m not going to go through it line by line because most of it is"},{"text":" ","type":"text"},{"text":"specific to what I want to do on CI and might be a good starting point for you,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"but you also may already have all those bits figured out. But line 31 is"},{"text":" ","type":"text"},{"text":"important:","type":"text"}],"type":"paragraph"},{"syntax":"sh","type":"codeListing","code":["export SCHEME=`xcodebuild -list -json | jq -r '.workspace.schemes[0]'`"]},{"inlineContent":[{"text":"The script in the CI Tooling repo is generic and does not know what project it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is working on. Therefore it needs to figure out what scheme to use for running"},{"type":"text","text":" "},{"type":"text","text":"tests, which it gets from the "},{"code":"xcodebuild -list -json","type":"codeVoice"},{"text":" command. Making this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"tooling generic means that it cannot make assumptions. This makes things more"},{"type":"text","text":" "},{"text":"difficult to initially get setup but makes adding new clients simple and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"straightforward."}],"type":"paragraph"},{"type":"aside","style":"warning","content":[{"inlineContent":[{"type":"text","text":"Do not use my CI Tooling repo – always have your own that is"},{"type":"text","text":" "},{"type":"text","text":"completely under your control! If you use my repo then I have too much access"},{"text":" ","type":"text"},{"type":"text","text":"to your CI pipelines and, theoretically, could do bad things. I wouldn’t do"},{"text":" ","type":"text"},{"text":"that because I’m a nice person, but you still shouldn’t trust me.","type":"text"}],"type":"paragraph"}],"name":"Warning"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When using these shared configuration files on both GitHub and GitLab, a"},{"type":"text","text":" "},{"type":"text","text":"new pull request must be opened to get the latest version of the shared"},{"text":" ","type":"text"},{"text":"configuration file. Both platforms cache the configuration file when the pull","type":"text"},{"type":"text","text":" "},{"type":"text","text":"request is opened."}]}]},{"type":"paragraph","inlineContent":[{"text":"You can also poke around that repo and see the other shared CI tools that I","type":"text"},{"type":"text","text":" "},{"type":"text","text":"have, some of which I plan to talk more about in future blog posts."}]}],"kind":"content"}],"references":{"allChecksHavePassed.png":{"variants":[{"traits":["1x","light"],"url":"\/images\/Brunow\/allChecksHavePassed@1x.png"}],"alt":null,"type":"image","identifier":"allChecksHavePassed.png"},"https://github.com/DavidBrunow/swift-conventional-commit-parser/blob/main/.github/workflows/pull_request.yml":{"title":"pull request GitHub action","url":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser\/blob\/main\/.github\/workflows\/pull_request.yml","identifier":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser\/blob\/main\/.github\/workflows\/pull_request.yml","type":"link","titleInlineContent":[{"type":"text","text":"pull request GitHub action"}]},"doc://Brunow/documentation/Brunow/Archive":{"title":"Archive","type":"topic","role":"collectionGroup","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","kind":"article","url":"\/documentation\/brunow\/archive","abstract":[{"type":"text","text":"All posts"}]},"doc://Brunow/documentation/Brunow/2024":{"kind":"article","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2024","url":"\/documentation\/brunow\/2024","role":"collectionGroup","abstract":[],"title":"2024","type":"topic"},"https://github.com/DavidBrunow/swift-conventional-commit-parser":{"title":"macOS command line tool that parses conventional commits","titleInlineContent":[{"type":"text","text":"macOS command line tool that parses conventional commits"}],"url":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser","type":"link","identifier":"https:\/\/github.com\/DavidBrunow\/swift-conventional-commit-parser"},"doc://Brunow/documentation/Brunow":{"role":"collection","url":"\/documentation\/brunow","identifier":"doc:\/\/Brunow\/documentation\/Brunow","title":"Brunow","type":"topic","kind":"symbol","abstract":[{"text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he.","type":"text"}]},"https://github.com/DavidBrunow/CI-Tooling/blob/apple/.github/workflows/macos-tools-pull-request-action.yml":{"title":"this configuration file","url":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-pull-request-action.yml","identifier":"https:\/\/github.com\/DavidBrunow\/CI-Tooling\/blob\/apple\/.github\/workflows\/macos-tools-pull-request-action.yml","type":"link","titleInlineContent":[{"type":"text","text":"this configuration file"}]}}}
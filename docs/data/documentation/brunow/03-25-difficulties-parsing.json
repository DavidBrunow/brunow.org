{"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/Brunow\/documentation\/Brunow\/03-25-difficulties-parsing","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"On the second episode of ","type":"text"},{"type":"reference","isActive":true,"identifier":"http:\/\/brunow.org\/podcast"},{"type":"text","text":" I talked about difficulties I’m having with my "},{"identifier":"https:\/\/itunes.apple.com\/us\/app\/dharma-talks\/id807331897?mt=8","type":"reference","isActive":true},{"type":"text","text":" app. I’d like to follow up that discussion with some examples that would be hard to share over audio only."}]},{"type":"paragraph","inlineContent":[{"text":"The problem is that I’m having trouble getting the proper information from the Mission Dharma website to display in the app. On the surface, this seems like a simple issue of taking the information that’s on the website, figuring out which parts of it mean what, and then storing it in the right places in the app. For example, if I can find an anchor tag, represented in HTML as","type":"text"}]},{"syntax":null,"code":["<a href=\"\/talks\/1\">March 21, 2015: Talk Title, Talk Speaker<\/a>"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"then I can take the text inside that tag as the raw Talk data. In this example, I can find the date by looking for the colon and taking everything before that colon and storing it as the date. I can find the title of the Talk by taking everything after the colon, looking for a comma, and then storing everything after the colon and before the comma as the title of the Talk. The rest of the text inside the tag is the speaker for that Talk. The URL to download the Talk is the easiest part because it is the full contents of the href tag."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This seems pretty easy, problem solved! But not really. This is where the fragility of HTML scraping becomes a problem. This is why most people would recommend against HTML scraping and I would definitely agree with those people if there is any other, better way to solve the problem. Or if the system you are building needs to be 100% reliable. But most systems don’t and I believe that Dharma Talks fits into that category."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"I’ll give an example of the fragility. Here is an anchor tag that I ran into while I was initially developing Dharma Talks:"}]},{"syntax":null,"type":"codeListing","code":["<a href=\"\/talks\/1\">March 21, 2015, Talk Title, Talk Speaker<\/a>"]},{"inlineContent":[{"text":"Do you see the difference? It’s subtle, but that comma after the year will completely ruin the parsing I described before. But while making the first version of Dharma Talks I’d seen this pattern so I adjusted my parsing for it. First I look for a colon, and if there is one then I do the parsing I described before. If there isn’t a colon then I find the second comma in the text inside the anchor tag and treat it the same as I did the colon earlier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This worked for over a year other than a couple of minor issues where the person that maintains Mission Dharma’s website changed the text inside the anchor tag after the app had parsed it, resulting in two of the exact same episode. At that time I hadn’t wanted to limit the parsing to any sort of uniqueness because I wanted it to be able to parse things as generally as possible — I feared any restrictions would make it more fragile."}],"type":"paragraph"},{"inlineContent":[{"text":"At this time the app only relied upon the Mission Dharma website being available for it to get new episodes. All the parsing was done inside the app and I had no control over what episodes were showing on someone’s phone. I couldn’t remove a duplicate episode that had had its title changed. I couldn’t fix a parsing error if the person maintaining Mission Dharma’s website didn’t follow one of the two patterns I described above. I liked the simplicity of only needing the app and the website, but I hated how fragile the whole thing was. I hated that my name was on something that looked poorly made. The line between simple and shoddy is thin.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Life got in the way and I didn’t work on the app for a year. When I did get time I noticed that I had taken a shortcut in building the app and I had hard-coded the years to be parsed. By hard-coding, I mean that I had told the app to parse 2010, 2011, 2012, 2013, and 2014. You can probably see the problem there. Hard-coding is bad and I know that, but I’m guessing I saw that as a very short term solution so I let it slide. That’s a good lesson for the future."}],"type":"paragraph"},{"inlineContent":[{"text":"So I fixed the hard-coding so it looks at the current year and parses starting at that year all the way back to 2010 which should make that part of the app future-proof. I submitted the update to Apple, it was approved, and things worked. For about a week.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Up above when I was describing the ways the parsing could break I only talked about the text inside the anchor tag. That’s the nice way things can break. The bad way is if there is no anchor tag. For example, a simple typo could make this:","type":"text"}]},{"type":"codeListing","code":["<a href=\"\/talks\/1\"March 21, 2015: Talk Title, Talk Speaker<\/a>"],"syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"Do you see the problem? The app would see it instantly and the parsing would break immediately. The opening anchor tag doesn’t have its closing ‘>’ so it isn’t truly an anchor tag. This is what happened about a week after I released the new version of the app. New Talks stopped being added to the app."}]},{"type":"paragraph","inlineContent":[{"text":"I’d been thinking about having an application on my server that does the parsing and stores it in a database for a while. That would give me the control I needed to make sure that the Talks were loaded in the app correctly. Since the database was on my server I could change any entries that got parsed incorrectly. If things were too broken on the Mission Dharma site I could manually add Talks to the database. I could finally guarantee uniqueness for each Talk because I had total control of the data in the database. Ultimately, it meant that I could make sure that the information for each Talk was correct.","type":"text"}]},{"inlineContent":[{"text":"Why didn’t I do this a year ago when I first released the app? A few reasons. I wanted the app to be able to live on without me and without my server. I wanted the components to be simple. And I didn’t have experience with any programming language that I could run on my server. All my work had been on Windows servers and I had a Linux server. I still think these are valid reasons to make the decision I made, but if I had it to do over again I would have done it differently. I would have implemented the solution that I just did — a server application that contacts the Mission Dharma website for Talks to parse and an iOS app that gets the Talk information from that server application.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"That solution went live today.","type":"text"}],"type":"paragraph"}]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/Brunow\/documentation\/Brunow","doc:\/\/Brunow\/documentation\/Brunow\/Archive","doc:\/\/Brunow\/documentation\/Brunow\/2015"]]},"topicSectionsStyle":"detailedGrid","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/brunow\/03-25-difficulties-parsing"]}],"sections":[],"abstract":[{"text":"date: 2015-03-25T20:44:29-05:00","type":"text"}],"metadata":{"title":"Difficulties Parsing","platforms":[{"name":"Brunow","introducedAt":"2017.01.20"}],"modules":[{"name":"Brunow"}],"color":{"standardColorIdentifier":"purple"}},"references":{"http://brunow.org/podcast":{"title":"The David Brunow Podcast","titleInlineContent":[{"text":"The David Brunow Podcast","type":"text"}],"identifier":"http:\/\/brunow.org\/podcast","type":"link","url":"http:\/\/brunow.org\/podcast"},"doc://Brunow/documentation/Brunow/2015":{"role":"collectionGroup","title":"2015","url":"\/documentation\/brunow\/2015","type":"topic","abstract":[],"identifier":"doc:\/\/Brunow\/documentation\/Brunow\/2015","kind":"article"},"doc://Brunow/documentation/Brunow/Archive":{"url":"\/documentation\/brunow\/archive","abstract":[{"text":"All posts","type":"text"}],"kind":"article","type":"topic","role":"collectionGroup","identifier":"doc:\/\/Brunow\/documentation\/Brunow\/Archive","title":"Archive"},"doc://Brunow/documentation/Brunow":{"url":"\/documentation\/brunow","kind":"symbol","identifier":"doc:\/\/Brunow\/documentation\/Brunow","type":"topic","abstract":[{"text":"David Brunow, known as Brunow [ˈbɹunoʊ] to the folks he works with, is a human living on Earth. You might have something in common with him — if you think it is ridiculous that he is talking about himself in the first person here, so does he.","type":"text"}],"role":"collection","title":"Brunow"},"https://itunes.apple.com/us/app/dharma-talks/id807331897?mt=8":{"identifier":"https:\/\/itunes.apple.com\/us\/app\/dharma-talks\/id807331897?mt=8","title":"Dharma Talks","type":"link","titleInlineContent":[{"type":"text","text":"Dharma Talks"}],"url":"https:\/\/itunes.apple.com\/us\/app\/dharma-talks\/id807331897?mt=8"}}}